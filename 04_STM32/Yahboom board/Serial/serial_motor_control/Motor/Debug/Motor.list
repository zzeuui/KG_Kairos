
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e70  08003e70  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e70  08003e70  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e70  08003e70  00004e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e74  08003e74  00004e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e78  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003e84  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003e84  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b397  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002443  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00012810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fc  00000000  00000000  000134f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f1  00000000  00000000  00013ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104d6  00000000  00000000  0002e5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098474  00000000  00000000  0003eabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6f2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000d6f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000da338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003e30 	.word	0x08003e30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003e30 	.word	0x08003e30

08000224 <Bsp_Init>:
}


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Beep_On_Time(50);
	Motor_Init();
 8000228:	f000 f87e 	bl	8000328 <Motor_Init>
	USART1_Init();
 800022c:	f000 f984 	bl	8000538 <USART1_Init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	HAL_UART_RxCpltCallback(&huart1);
 800023a:	4828      	ldr	r0, [pc, #160]	@ (80002dc <Bsp_Loop+0xa8>)
 800023c:	f000 f99c 	bl	8000578 <HAL_UART_RxCpltCallback>

	while(1){
		int speed = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	607b      	str	r3, [r7, #4]

		if (RxTemp == '1')
 8000244:	4b26      	ldr	r3, [pc, #152]	@ (80002e0 <Bsp_Loop+0xac>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b31      	cmp	r3, #49	@ 0x31
 800024a:	d11a      	bne.n	8000282 <Bsp_Loop+0x4e>
		{
			speed = 2000;
 800024c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000250:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	b21b      	sxth	r3, r3
 8000256:	4619      	mov	r1, r3
 8000258:	2000      	movs	r0, #0
 800025a:	f000 f8d9 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	b21b      	sxth	r3, r3
 8000262:	4619      	mov	r1, r3
 8000264:	2001      	movs	r0, #1
 8000266:	f000 f8d3 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	b21b      	sxth	r3, r3
 800026e:	4619      	mov	r1, r3
 8000270:	2002      	movs	r0, #2
 8000272:	f000 f8cd 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	b21b      	sxth	r3, r3
 800027a:	4619      	mov	r1, r3
 800027c:	2003      	movs	r0, #3
 800027e:	f000 f8c7 	bl	8000410 <Motor_Set_Pwm>
		}
		if (RxTemp == '2')
 8000282:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <Bsp_Loop+0xac>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b32      	cmp	r3, #50	@ 0x32
 8000288:	d102      	bne.n	8000290 <Bsp_Loop+0x5c>
		{
			Motor_Stop(0);
 800028a:	2000      	movs	r0, #0
 800028c:	f000 f874 	bl	8000378 <Motor_Stop>
		}
		if (RxTemp == '3')
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <Bsp_Loop+0xac>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b33      	cmp	r3, #51	@ 0x33
 8000296:	d119      	bne.n	80002cc <Bsp_Loop+0x98>
		{
			speed = -2000;
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <Bsp_Loop+0xb0>)
 800029a:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	b21b      	sxth	r3, r3
 80002a0:	4619      	mov	r1, r3
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f8b4 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	b21b      	sxth	r3, r3
 80002ac:	4619      	mov	r1, r3
 80002ae:	2001      	movs	r0, #1
 80002b0:	f000 f8ae 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4619      	mov	r1, r3
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 f8a8 	bl	8000410 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	2003      	movs	r0, #3
 80002c8:	f000 f8a2 	bl	8000410 <Motor_Set_Pwm>
		}
		if (RxTemp == '4')
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <Bsp_Loop+0xac>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b34      	cmp	r3, #52	@ 0x34
 80002d2:	d1b5      	bne.n	8000240 <Bsp_Loop+0xc>
		{
			Motor_Stop(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f84f 	bl	8000378 <Motor_Stop>
	while(1){
 80002da:	e7b1      	b.n	8000240 <Bsp_Loop+0xc>
 80002dc:	200000bc 	.word	0x200000bc
 80002e0:	20000028 	.word	0x20000028
 80002e4:	fffff830 	.word	0xfffff830

080002e8 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 80002f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	dd05      	ble.n	8000306 <Motor_Ignore_Dead_Zone+0x1e>
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8000300:	b29b      	uxth	r3, r3
 8000302:	b21b      	sxth	r3, r3
 8000304:	e00a      	b.n	800031c <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 8000306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800030a:	2b00      	cmp	r3, #0
 800030c:	da05      	bge.n	800031a <Motor_Ignore_Dead_Zone+0x32>
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8000314:	b29b      	uxth	r3, r3
 8000316:	b21b      	sxth	r3, r3
 8000318:	e000      	b.n	800031c <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
	...

08000328 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800032c:	2100      	movs	r1, #0
 800032e:	4810      	ldr	r0, [pc, #64]	@ (8000370 <Motor_Init+0x48>)
 8000330:	f002 f972 	bl	8002618 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000334:	2104      	movs	r1, #4
 8000336:	480e      	ldr	r0, [pc, #56]	@ (8000370 <Motor_Init+0x48>)
 8000338:	f002 fe8a 	bl	8003050 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800033c:	2108      	movs	r1, #8
 800033e:	480c      	ldr	r0, [pc, #48]	@ (8000370 <Motor_Init+0x48>)
 8000340:	f002 fe86 	bl	8003050 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000344:	210c      	movs	r1, #12
 8000346:	480a      	ldr	r0, [pc, #40]	@ (8000370 <Motor_Init+0x48>)
 8000348:	f002 f966 	bl	8002618 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800034c:	2100      	movs	r1, #0
 800034e:	4809      	ldr	r0, [pc, #36]	@ (8000374 <Motor_Init+0x4c>)
 8000350:	f002 f962 	bl	8002618 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000354:	2104      	movs	r1, #4
 8000356:	4807      	ldr	r0, [pc, #28]	@ (8000374 <Motor_Init+0x4c>)
 8000358:	f002 f95e 	bl	8002618 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800035c:	2108      	movs	r1, #8
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <Motor_Init+0x4c>)
 8000360:	f002 f95a 	bl	8002618 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000364:	210c      	movs	r1, #12
 8000366:	4803      	ldr	r0, [pc, #12]	@ (8000374 <Motor_Init+0x4c>)
 8000368:	f002 f956 	bl	8002618 <HAL_TIM_PWM_Start>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000002c 	.word	0x2000002c
 8000374:	20000074 	.word	0x20000074

08000378 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <Motor_Stop+0x14>
 8000388:	2301      	movs	r3, #1
 800038a:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000392:	fb03 f202 	mul.w	r2, r3, r2
 8000396:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <Motor_Stop+0x90>)
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003a0:	fb03 f202 	mul.w	r2, r3, r2
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <Motor_Stop+0x90>)
 80003a6:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003ae:	fb03 f202 	mul.w	r2, r3, r2
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <Motor_Stop+0x90>)
 80003b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003bc:	fb03 f202 	mul.w	r2, r3, r2
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <Motor_Stop+0x90>)
 80003c2:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003ca:	fb03 f202 	mul.w	r2, r3, r2
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <Motor_Stop+0x94>)
 80003d0:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003d8:	fb03 f202 	mul.w	r2, r3, r2
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <Motor_Stop+0x94>)
 80003de:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003e6:	fb03 f202 	mul.w	r2, r3, r2
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <Motor_Stop+0x94>)
 80003ec:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003f4:	fb03 f202 	mul.w	r2, r3, r2
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <Motor_Stop+0x94>)
 80003fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40013400 	.word	0x40013400
 800040c:	40012c00 	.word	0x40012c00

08000410 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	460a      	mov	r2, r1
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	4613      	mov	r3, r2
 800041e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8000420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <Motor_Ignore_Dead_Zone>
 800042a:	4603      	mov	r3, r0
 800042c:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800042e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000432:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000436:	db02      	blt.n	800043e <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8000438:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800043c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800043e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000442:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8000446:	dc02      	bgt.n	800044e <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8000448:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 800044c:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d867      	bhi.n	8000524 <Motor_Set_Pwm+0x114>
 8000454:	a201      	add	r2, pc, #4	@ (adr r2, 800045c <Motor_Set_Pwm+0x4c>)
 8000456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045a:	bf00      	nop
 800045c:	0800046d 	.word	0x0800046d
 8000460:	0800049f 	.word	0x0800049f
 8000464:	080004d1 	.word	0x080004d1
 8000468:	080004fb 	.word	0x080004fb
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	425b      	negs	r3, r3
 8000470:	b29b      	uxth	r3, r3
 8000472:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000478:	2b00      	cmp	r3, #0
 800047a:	db07      	blt.n	800048c <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 800047c:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <Motor_Set_Pwm+0x120>)
 800047e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000482:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8000484:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <Motor_Set_Pwm+0x120>)
 8000486:	2200      	movs	r2, #0
 8000488:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800048a:	e04c      	b.n	8000526 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 800048c:	4b28      	ldr	r3, [pc, #160]	@ (8000530 <Motor_Set_Pwm+0x120>)
 800048e:	2200      	movs	r2, #0
 8000490:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8000492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000496:	425a      	negs	r2, r3
 8000498:	4b25      	ldr	r3, [pc, #148]	@ (8000530 <Motor_Set_Pwm+0x120>)
 800049a:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800049c:	e043      	b.n	8000526 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800049e:	89fb      	ldrh	r3, [r7, #14]
 80004a0:	425b      	negs	r3, r3
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80004a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	db07      	blt.n	80004be <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80004ae:	4a20      	ldr	r2, [pc, #128]	@ (8000530 <Motor_Set_Pwm+0x120>)
 80004b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <Motor_Set_Pwm+0x120>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80004bc:	e033      	b.n	8000526 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80004be:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <Motor_Set_Pwm+0x120>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 80004c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004c8:	425a      	negs	r2, r3
 80004ca:	4b19      	ldr	r3, [pc, #100]	@ (8000530 <Motor_Set_Pwm+0x120>)
 80004cc:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80004ce:	e02a      	b.n	8000526 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 80004d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db07      	blt.n	80004e8 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80004d8:	4a16      	ldr	r2, [pc, #88]	@ (8000534 <Motor_Set_Pwm+0x124>)
 80004da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004de:	6413      	str	r3, [r2, #64]	@ 0x40
            PWM_M3_B = 0;
 80004e0:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <Motor_Set_Pwm+0x124>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80004e6:	e01e      	b.n	8000526 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <Motor_Set_Pwm+0x124>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 80004ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004f2:	425a      	negs	r2, r3
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <Motor_Set_Pwm+0x124>)
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80004f8:	e015      	b.n	8000526 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 80004fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	db07      	blt.n	8000512 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8000502:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <Motor_Set_Pwm+0x124>)
 8000504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000508:	6393      	str	r3, [r2, #56]	@ 0x38
            PWM_M4_B = 0;
 800050a:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <Motor_Set_Pwm+0x124>)
 800050c:	2200      	movs	r2, #0
 800050e:	63da      	str	r2, [r3, #60]	@ 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8000510:	e009      	b.n	8000526 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <Motor_Set_Pwm+0x124>)
 8000514:	2200      	movs	r2, #0
 8000516:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 8000518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800051c:	425a      	negs	r2, r3
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <Motor_Set_Pwm+0x124>)
 8000520:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8000522:	e000      	b.n	8000526 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8000524:	bf00      	nop
    }
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40013400 	.word	0x40013400
 8000534:	40012c00 	.word	0x40012c00

08000538 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	4903      	ldr	r1, [pc, #12]	@ (800054c <USART1_Init+0x14>)
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <USART1_Init+0x18>)
 8000542:	f002 fff1 	bl	8003528 <HAL_UART_Receive_IT>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	200000bc 	.word	0x200000bc

08000554 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800055e:	1df9      	adds	r1, r7, #7
 8000560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000564:	2201      	movs	r2, #1
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <USART1_Send_U8+0x20>)
 8000568:	f002 ff4c 	bl	8003404 <HAL_UART_Transmit>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000bc 	.word	0x200000bc

08000578 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_UART_RxCpltCallback+0x24>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffe5 	bl	8000554 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	4903      	ldr	r1, [pc, #12]	@ (800059c <HAL_UART_RxCpltCallback+0x24>)
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <HAL_UART_RxCpltCallback+0x28>)
 8000590:	f002 ffca 	bl	8003528 <HAL_UART_Receive_IT>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028
 80005a0:	200000bc 	.word	0x200000bc

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_DMA_Init+0x38>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <MX_DMA_Init+0x38>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_DMA_Init+0x38>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200e      	movs	r0, #14
 80005c8:	f000 fd8d 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005cc:	200e      	movs	r0, #14
 80005ce:	f000 fda6 	bl	800111e <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a29      	ldr	r2, [pc, #164]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0320 	and.w	r3, r3, #32
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1d      	ldr	r2, [pc, #116]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_GPIO_Init+0xc0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f242 0120 	movw	r1, #8224	@ 0x2020
 800065a:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800065c:	f001 fb02 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000660:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800067a:	f001 f95f 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800067e:	2304      	movs	r3, #4
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_GPIO_Init+0xc8>)
 8000692:	f001 f953 	bl	800193c <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40011000 	.word	0x40011000
 80006a8:	40011400 	.word	0x40011400

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fbe0 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f80f 	bl	80006d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f7ff ff92 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006bc:	f7ff ff72 	bl	80005a4 <MX_DMA_Init>
  MX_TIM1_Init();
 80006c0:	f000 f8cc 	bl	800085c <MX_TIM1_Init>
  MX_TIM8_Init();
 80006c4:	f000 f98e 	bl	80009e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fb06 	bl	8000cd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 80006cc:	f7ff fdaa 	bl	8000224 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 80006d0:	f7ff fdb0 	bl	8000234 <Bsp_Loop>
 80006d4:	e7fc      	b.n	80006d0 <main+0x24>

080006d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b090      	sub	sp, #64	@ 0x40
 80006da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2228      	movs	r2, #40	@ 0x28
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fb77 	bl	8003dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000714:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fab8 	bl	8001c94 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800072a:	f000 f819 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fd25 	bl	8002198 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000754:	f000 f804 	bl	8000760 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3740      	adds	r7, #64	@ 0x40
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <HAL_MspInit+0x5c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a0e      	ldr	r2, [pc, #56]	@ (80007c8 <HAL_MspInit+0x5c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_MspInit+0x60>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <HAL_MspInit+0x60>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 fb6e 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800082c:	4802      	ldr	r0, [pc, #8]	@ (8000838 <DMA1_Channel4_IRQHandler+0x10>)
 800082e:	f000 fe49 	bl	80014c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000100 	.word	0x20000100

0800083c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000840:	4802      	ldr	r0, [pc, #8]	@ (800084c <USART1_IRQHandler+0x10>)
 8000842:	f002 fea1 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000bc 	.word	0x200000bc

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	@ 0x58
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fa9f 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089a:	4b50      	ldr	r3, [pc, #320]	@ (80009dc <MX_TIM1_Init+0x180>)
 800089c:	4a50      	ldr	r2, [pc, #320]	@ (80009e0 <MX_TIM1_Init+0x184>)
 800089e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a0:	4b4e      	ldr	r3, [pc, #312]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b4d      	ldr	r3, [pc, #308]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 80008ac:	4b4b      	ldr	r3, [pc, #300]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008ae:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80008b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ba:	4b48      	ldr	r3, [pc, #288]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c0:	4b46      	ldr	r3, [pc, #280]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c6:	4845      	ldr	r0, [pc, #276]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008c8:	f001 fdfe 	bl	80024c8 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d2:	f7ff ff45 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008e0:	4619      	mov	r1, r3
 80008e2:	483e      	ldr	r0, [pc, #248]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008e4:	f002 f810 	bl	8002908 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008ee:	f7ff ff37 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f2:	483a      	ldr	r0, [pc, #232]	@ (80009dc <MX_TIM1_Init+0x180>)
 80008f4:	f001 fe37 	bl	8002566 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008fe:	f7ff ff2f 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800090e:	4619      	mov	r1, r3
 8000910:	4832      	ldr	r0, [pc, #200]	@ (80009dc <MX_TIM1_Init+0x180>)
 8000912:	f002 fc49 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800091c:	f7ff ff20 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	4825      	ldr	r0, [pc, #148]	@ (80009dc <MX_TIM1_Init+0x180>)
 8000946:	f001 ff21 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000950:	f7ff ff06 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000958:	2204      	movs	r2, #4
 800095a:	4619      	mov	r1, r3
 800095c:	481f      	ldr	r0, [pc, #124]	@ (80009dc <MX_TIM1_Init+0x180>)
 800095e:	f001 ff15 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000968:	f7ff fefa 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	2208      	movs	r2, #8
 8000972:	4619      	mov	r1, r3
 8000974:	4819      	ldr	r0, [pc, #100]	@ (80009dc <MX_TIM1_Init+0x180>)
 8000976:	f001 ff09 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000980:	f7ff feee 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000988:	220c      	movs	r2, #12
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	@ (80009dc <MX_TIM1_Init+0x180>)
 800098e:	f001 fefd 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000998:	f7ff fee2 	bl	8000760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM1_Init+0x180>)
 80009c0:	f002 fc5e 	bl	8003280 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80009ca:	f7ff fec9 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM1_Init+0x180>)
 80009d0:	f000 f8fe 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3758      	adds	r7, #88	@ 0x58
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000002c 	.word	0x2000002c
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	@ 0x58
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2220      	movs	r2, #32
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 f9db 	bl	8003dd8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a22:	4b50      	ldr	r3, [pc, #320]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a24:	4a50      	ldr	r2, [pc, #320]	@ (8000b68 <MX_TIM8_Init+0x184>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a28:	4b4e      	ldr	r3, [pc, #312]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8000a34:	4b4b      	ldr	r3, [pc, #300]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a36:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000a3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b49      	ldr	r3, [pc, #292]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a42:	4b48      	ldr	r3, [pc, #288]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a48:	4b46      	ldr	r3, [pc, #280]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a4e:	4845      	ldr	r0, [pc, #276]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a50:	f001 fd3a 	bl	80024c8 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000a5a:	f7ff fe81 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a68:	4619      	mov	r1, r3
 8000a6a:	483e      	ldr	r0, [pc, #248]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a6c:	f001 ff4c 	bl	8002908 <HAL_TIM_ConfigClockSource>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000a76:	f7ff fe73 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a7a:	483a      	ldr	r0, [pc, #232]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a7c:	f001 fd73 	bl	8002566 <HAL_TIM_PWM_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a86:	f7ff fe6b 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a96:	4619      	mov	r1, r3
 8000a98:	4832      	ldr	r0, [pc, #200]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000a9a:	f002 fb85 	bl	80031a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000aa4:	f7ff fe5c 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa8:	2360      	movs	r3, #96	@ 0x60
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4825      	ldr	r0, [pc, #148]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000ace:	f001 fe5d 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000ad8:	f7ff fe42 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481f      	ldr	r0, [pc, #124]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000ae6:	f001 fe51 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000af0:	f7ff fe36 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	2208      	movs	r2, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	4819      	ldr	r0, [pc, #100]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000afe:	f001 fe45 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000b08:	f7ff fe2a 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	220c      	movs	r2, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000b16:	f001 fe39 	bl	800278c <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000b20:	f7ff fe1e 	bl	8000760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000b48:	f002 fb9a 	bl	8003280 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000b52:	f7ff fe05 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b56:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <MX_TIM8_Init+0x180>)
 8000b58:	f000 f83a 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	@ 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000074 	.word	0x20000074
 8000b68:	40013400 	.word	0x40013400

08000b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x58>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d10c      	bne.n	8000b98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000b96:	e010      	b.n	8000bba <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bcc <HAL_TIM_Base_MspInit+0x60>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ba8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40013400 	.word	0x40013400

08000bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a34      	ldr	r2, [pc, #208]	@ (8000cbc <HAL_TIM_MspPostInit+0xec>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d143      	bne.n	8000c78 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a32      	ldr	r2, [pc, #200]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c20:	2303      	movs	r3, #3
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4824      	ldr	r0, [pc, #144]	@ (8000cc4 <HAL_TIM_MspPostInit+0xf4>)
 8000c34:	f000 fe82 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000c38:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481e      	ldr	r0, [pc, #120]	@ (8000cc8 <HAL_TIM_MspPostInit+0xf8>)
 8000c4e:	f000 fe75 	bl	800193c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <HAL_TIM_MspPostInit+0xfc>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c70:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <HAL_TIM_MspPostInit+0xfc>)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c76:	e01d      	b.n	8000cb4 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <HAL_TIM_MspPostInit+0x100>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d118      	bne.n	8000cb4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_TIM_MspPostInit+0xf0>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c9a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4809      	ldr	r0, [pc, #36]	@ (8000cd4 <HAL_TIM_MspPostInit+0x104>)
 8000cb0:	f000 fe44 	bl	800193c <HAL_GPIO_Init>
}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40012c00 	.word	0x40012c00
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40013400 	.word	0x40013400
 8000cd4:	40011000 	.word	0x40011000

08000cd8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <MX_USART1_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d10:	f002 fb2b 	bl	800336a <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f7ff fd21 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000bc 	.word	0x200000bc
 8000d28:	40013800 	.word	0x40013800

08000d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <HAL_UART_MspInit+0xe8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d15f      	bne.n	8000e0c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4c:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a31      	ldr	r2, [pc, #196]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a2b      	ldr	r2, [pc, #172]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <HAL_UART_MspInit+0xec>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4822      	ldr	r0, [pc, #136]	@ (8000e1c <HAL_UART_MspInit+0xf0>)
 8000d92:	f000 fdd3 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	481c      	ldr	r0, [pc, #112]	@ (8000e1c <HAL_UART_MspInit+0xf0>)
 8000dac:	f000 fdc6 	bl	800193c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <HAL_UART_MspInit+0xf8>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000db8:	2210      	movs	r2, #16
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000de0:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000de2:	f000 f9b7 	bl	8001154 <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000dec:	f7ff fcb8 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_UART_MspInit+0xf4>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2025      	movs	r0, #37	@ 0x25
 8000e02:	f000 f970 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e06:	2025      	movs	r0, #37	@ 0x25
 8000e08:	f000 f989 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	20000100 	.word	0x20000100
 8000e24:	40020044 	.word	0x40020044

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff fcff 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 ffc9 	bl	8003de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fc29 	bl	80006ac <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e64:	08003e78 	.word	0x08003e78
  ldr r2, =_sbss
 8000e68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e6c:	20000148 	.word	0x20000148

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f923 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fc6c 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f93b 	bl	800113a <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f903 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000144 	.word	0x20000144

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	@ (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000144 	.word	0x20000144

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4906      	ldr	r1, [pc, #24]	@ (8000fd0 <__NVIC_EnableIRQ+0x34>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff90 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff2d 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff42 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff90 	bl	8001028 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5f 	bl	8000fd4 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff35 	bl	8000f9c <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e059      	b.n	800121e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <HAL_DMA_Init+0xd4>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d80f      	bhi.n	8001196 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_DMA_Init+0xd8>)
 800117e:	4413      	add	r3, r2
 8001180:	4a2b      	ldr	r2, [pc, #172]	@ (8001230 <HAL_DMA_Init+0xdc>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	009a      	lsls	r2, r3, #2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <HAL_DMA_Init+0xe0>)
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001194:	e00e      	b.n	80011b4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <HAL_DMA_Init+0xe4>)
 800119e:	4413      	add	r3, r2
 80011a0:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <HAL_DMA_Init+0xdc>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	009a      	lsls	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a22      	ldr	r2, [pc, #136]	@ (800123c <HAL_DMA_Init+0xe8>)
 80011b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40020407 	.word	0x40020407
 800122c:	bffdfff8 	.word	0xbffdfff8
 8001230:	cccccccd 	.word	0xcccccccd
 8001234:	40020000 	.word	0x40020000
 8001238:	bffdfbf8 	.word	0xbffdfbf8
 800123c:	40020400 	.word	0x40020400

08001240 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001252:	2b02      	cmp	r3, #2
 8001254:	d008      	beq.n	8001268 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2204      	movs	r2, #4
 800125a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e020      	b.n	80012aa <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f202 	lsl.w	r2, r1, r2
 8001296:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e0d6      	b.n	8001484 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <HAL_DMA_Abort_IT+0x1dc>)
 80012fe:	429a      	cmp	r2, r3
 8001300:	d958      	bls.n	80013b4 <HAL_DMA_Abort_IT+0x100>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a63      	ldr	r2, [pc, #396]	@ (8001494 <HAL_DMA_Abort_IT+0x1e0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d04f      	beq.n	80013ac <HAL_DMA_Abort_IT+0xf8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a61      	ldr	r2, [pc, #388]	@ (8001498 <HAL_DMA_Abort_IT+0x1e4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d048      	beq.n	80013a8 <HAL_DMA_Abort_IT+0xf4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a60      	ldr	r2, [pc, #384]	@ (800149c <HAL_DMA_Abort_IT+0x1e8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d040      	beq.n	80013a2 <HAL_DMA_Abort_IT+0xee>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a5e      	ldr	r2, [pc, #376]	@ (80014a0 <HAL_DMA_Abort_IT+0x1ec>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d038      	beq.n	800139c <HAL_DMA_Abort_IT+0xe8>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a5d      	ldr	r2, [pc, #372]	@ (80014a4 <HAL_DMA_Abort_IT+0x1f0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d030      	beq.n	8001396 <HAL_DMA_Abort_IT+0xe2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a5b      	ldr	r2, [pc, #364]	@ (80014a8 <HAL_DMA_Abort_IT+0x1f4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d028      	beq.n	8001390 <HAL_DMA_Abort_IT+0xdc>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a53      	ldr	r2, [pc, #332]	@ (8001490 <HAL_DMA_Abort_IT+0x1dc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d020      	beq.n	800138a <HAL_DMA_Abort_IT+0xd6>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a57      	ldr	r2, [pc, #348]	@ (80014ac <HAL_DMA_Abort_IT+0x1f8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_DMA_Abort_IT+0xd2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a56      	ldr	r2, [pc, #344]	@ (80014b0 <HAL_DMA_Abort_IT+0x1fc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d012      	beq.n	8001382 <HAL_DMA_Abort_IT+0xce>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a54      	ldr	r2, [pc, #336]	@ (80014b4 <HAL_DMA_Abort_IT+0x200>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00a      	beq.n	800137c <HAL_DMA_Abort_IT+0xc8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a53      	ldr	r2, [pc, #332]	@ (80014b8 <HAL_DMA_Abort_IT+0x204>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d102      	bne.n	8001376 <HAL_DMA_Abort_IT+0xc2>
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	e01b      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 8001376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800137a:	e018      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 800137c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001380:	e015      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 8001382:	2310      	movs	r3, #16
 8001384:	e013      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 8001386:	2301      	movs	r3, #1
 8001388:	e011      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 800138a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800138e:	e00e      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 8001390:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001394:	e00b      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 8001396:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139a:	e008      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	e005      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 80013a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a6:	e002      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 80013a8:	2310      	movs	r3, #16
 80013aa:	e000      	b.n	80013ae <HAL_DMA_Abort_IT+0xfa>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4a43      	ldr	r2, [pc, #268]	@ (80014bc <HAL_DMA_Abort_IT+0x208>)
 80013b0:	6053      	str	r3, [r2, #4]
 80013b2:	e057      	b.n	8001464 <HAL_DMA_Abort_IT+0x1b0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a36      	ldr	r2, [pc, #216]	@ (8001494 <HAL_DMA_Abort_IT+0x1e0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d04f      	beq.n	800145e <HAL_DMA_Abort_IT+0x1aa>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a35      	ldr	r2, [pc, #212]	@ (8001498 <HAL_DMA_Abort_IT+0x1e4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d048      	beq.n	800145a <HAL_DMA_Abort_IT+0x1a6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a33      	ldr	r2, [pc, #204]	@ (800149c <HAL_DMA_Abort_IT+0x1e8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d040      	beq.n	8001454 <HAL_DMA_Abort_IT+0x1a0>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_DMA_Abort_IT+0x1ec>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d038      	beq.n	800144e <HAL_DMA_Abort_IT+0x19a>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a30      	ldr	r2, [pc, #192]	@ (80014a4 <HAL_DMA_Abort_IT+0x1f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d030      	beq.n	8001448 <HAL_DMA_Abort_IT+0x194>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a2f      	ldr	r2, [pc, #188]	@ (80014a8 <HAL_DMA_Abort_IT+0x1f4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d028      	beq.n	8001442 <HAL_DMA_Abort_IT+0x18e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <HAL_DMA_Abort_IT+0x1dc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d020      	beq.n	800143c <HAL_DMA_Abort_IT+0x188>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2b      	ldr	r2, [pc, #172]	@ (80014ac <HAL_DMA_Abort_IT+0x1f8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d019      	beq.n	8001438 <HAL_DMA_Abort_IT+0x184>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <HAL_DMA_Abort_IT+0x1fc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d012      	beq.n	8001434 <HAL_DMA_Abort_IT+0x180>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <HAL_DMA_Abort_IT+0x200>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00a      	beq.n	800142e <HAL_DMA_Abort_IT+0x17a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <HAL_DMA_Abort_IT+0x204>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d102      	bne.n	8001428 <HAL_DMA_Abort_IT+0x174>
 8001422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001426:	e01b      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142c:	e018      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 800142e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001432:	e015      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001434:	2310      	movs	r3, #16
 8001436:	e013      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001438:	2301      	movs	r3, #1
 800143a:	e011      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 800143c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001440:	e00e      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001442:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001446:	e00b      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800144c:	e008      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 800144e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001452:	e005      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 8001454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001458:	e002      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 800145a:	2310      	movs	r3, #16
 800145c:	e000      	b.n	8001460 <HAL_DMA_Abort_IT+0x1ac>
 800145e:	2301      	movs	r3, #1
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_DMA_Abort_IT+0x20c>)
 8001462:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
    } 
  }
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40020080 	.word	0x40020080
 8001494:	40020008 	.word	0x40020008
 8001498:	4002001c 	.word	0x4002001c
 800149c:	40020030 	.word	0x40020030
 80014a0:	40020044 	.word	0x40020044
 80014a4:	40020058 	.word	0x40020058
 80014a8:	4002006c 	.word	0x4002006c
 80014ac:	40020408 	.word	0x40020408
 80014b0:	4002041c 	.word	0x4002041c
 80014b4:	40020430 	.word	0x40020430
 80014b8:	40020444 	.word	0x40020444
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	2204      	movs	r2, #4
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80f1 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x20c>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80eb 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0204 	bic.w	r2, r2, #4
 8001516:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b5f      	ldr	r3, [pc, #380]	@ (800169c <HAL_DMA_IRQHandler+0x1d8>)
 8001520:	429a      	cmp	r2, r3
 8001522:	d958      	bls.n	80015d6 <HAL_DMA_IRQHandler+0x112>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5d      	ldr	r2, [pc, #372]	@ (80016a0 <HAL_DMA_IRQHandler+0x1dc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d04f      	beq.n	80015ce <HAL_DMA_IRQHandler+0x10a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5c      	ldr	r2, [pc, #368]	@ (80016a4 <HAL_DMA_IRQHandler+0x1e0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d048      	beq.n	80015ca <HAL_DMA_IRQHandler+0x106>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5a      	ldr	r2, [pc, #360]	@ (80016a8 <HAL_DMA_IRQHandler+0x1e4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d040      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x100>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a59      	ldr	r2, [pc, #356]	@ (80016ac <HAL_DMA_IRQHandler+0x1e8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d038      	beq.n	80015be <HAL_DMA_IRQHandler+0xfa>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a57      	ldr	r2, [pc, #348]	@ (80016b0 <HAL_DMA_IRQHandler+0x1ec>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d030      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xf4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a56      	ldr	r2, [pc, #344]	@ (80016b4 <HAL_DMA_IRQHandler+0x1f0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d028      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xee>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4d      	ldr	r2, [pc, #308]	@ (800169c <HAL_DMA_IRQHandler+0x1d8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d020      	beq.n	80015ac <HAL_DMA_IRQHandler+0xe8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a52      	ldr	r2, [pc, #328]	@ (80016b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d019      	beq.n	80015a8 <HAL_DMA_IRQHandler+0xe4>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a50      	ldr	r2, [pc, #320]	@ (80016bc <HAL_DMA_IRQHandler+0x1f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d012      	beq.n	80015a4 <HAL_DMA_IRQHandler+0xe0>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a4f      	ldr	r2, [pc, #316]	@ (80016c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d00a      	beq.n	800159e <HAL_DMA_IRQHandler+0xda>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <HAL_DMA_IRQHandler+0x200>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d102      	bne.n	8001598 <HAL_DMA_IRQHandler+0xd4>
 8001592:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001596:	e01b      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 8001598:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800159c:	e018      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 800159e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a2:	e015      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015a4:	2340      	movs	r3, #64	@ 0x40
 80015a6:	e013      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e011      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015b0:	e00e      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015b6:	e00b      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015bc:	e008      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c2:	e005      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c8:	e002      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	e000      	b.n	80015d0 <HAL_DMA_IRQHandler+0x10c>
 80015ce:	2304      	movs	r3, #4
 80015d0:	4a3d      	ldr	r2, [pc, #244]	@ (80016c8 <HAL_DMA_IRQHandler+0x204>)
 80015d2:	6053      	str	r3, [r2, #4]
 80015d4:	e057      	b.n	8001686 <HAL_DMA_IRQHandler+0x1c2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a31      	ldr	r2, [pc, #196]	@ (80016a0 <HAL_DMA_IRQHandler+0x1dc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d04f      	beq.n	8001680 <HAL_DMA_IRQHandler+0x1bc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <HAL_DMA_IRQHandler+0x1e0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d048      	beq.n	800167c <HAL_DMA_IRQHandler+0x1b8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2e      	ldr	r2, [pc, #184]	@ (80016a8 <HAL_DMA_IRQHandler+0x1e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d040      	beq.n	8001676 <HAL_DMA_IRQHandler+0x1b2>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2c      	ldr	r2, [pc, #176]	@ (80016ac <HAL_DMA_IRQHandler+0x1e8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d038      	beq.n	8001670 <HAL_DMA_IRQHandler+0x1ac>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2b      	ldr	r2, [pc, #172]	@ (80016b0 <HAL_DMA_IRQHandler+0x1ec>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d030      	beq.n	800166a <HAL_DMA_IRQHandler+0x1a6>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <HAL_DMA_IRQHandler+0x1f0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d028      	beq.n	8001664 <HAL_DMA_IRQHandler+0x1a0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a21      	ldr	r2, [pc, #132]	@ (800169c <HAL_DMA_IRQHandler+0x1d8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d020      	beq.n	800165e <HAL_DMA_IRQHandler+0x19a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_DMA_IRQHandler+0x196>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a24      	ldr	r2, [pc, #144]	@ (80016bc <HAL_DMA_IRQHandler+0x1f8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d012      	beq.n	8001656 <HAL_DMA_IRQHandler+0x192>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00a      	beq.n	8001650 <HAL_DMA_IRQHandler+0x18c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_DMA_IRQHandler+0x200>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d102      	bne.n	800164a <HAL_DMA_IRQHandler+0x186>
 8001644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001648:	e01b      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 800164a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800164e:	e018      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001654:	e015      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001656:	2340      	movs	r3, #64	@ 0x40
 8001658:	e013      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 800165a:	2304      	movs	r3, #4
 800165c:	e011      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 800165e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001662:	e00e      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001664:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001668:	e00b      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 800166a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800166e:	e008      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001670:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001674:	e005      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167a:	e002      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	e000      	b.n	8001682 <HAL_DMA_IRQHandler+0x1be>
 8001680:	2304      	movs	r3, #4
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <HAL_DMA_IRQHandler+0x208>)
 8001684:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8136 	beq.w	80018fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001698:	e130      	b.n	80018fc <HAL_DMA_IRQHandler+0x438>
 800169a:	bf00      	nop
 800169c:	40020080 	.word	0x40020080
 80016a0:	40020008 	.word	0x40020008
 80016a4:	4002001c 	.word	0x4002001c
 80016a8:	40020030 	.word	0x40020030
 80016ac:	40020044 	.word	0x40020044
 80016b0:	40020058 	.word	0x40020058
 80016b4:	4002006c 	.word	0x4002006c
 80016b8:	40020408 	.word	0x40020408
 80016bc:	4002041c 	.word	0x4002041c
 80016c0:	40020430 	.word	0x40020430
 80016c4:	40020444 	.word	0x40020444
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	2202      	movs	r2, #2
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80dd 	beq.w	800189c <HAL_DMA_IRQHandler+0x3d8>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80d7 	beq.w	800189c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 020a 	bic.w	r2, r2, #10
 800170a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b7b      	ldr	r3, [pc, #492]	@ (8001908 <HAL_DMA_IRQHandler+0x444>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d958      	bls.n	80017d2 <HAL_DMA_IRQHandler+0x30e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a79      	ldr	r2, [pc, #484]	@ (800190c <HAL_DMA_IRQHandler+0x448>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d04f      	beq.n	80017ca <HAL_DMA_IRQHandler+0x306>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a78      	ldr	r2, [pc, #480]	@ (8001910 <HAL_DMA_IRQHandler+0x44c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d048      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x302>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a76      	ldr	r2, [pc, #472]	@ (8001914 <HAL_DMA_IRQHandler+0x450>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d040      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x2fc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a75      	ldr	r2, [pc, #468]	@ (8001918 <HAL_DMA_IRQHandler+0x454>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d038      	beq.n	80017ba <HAL_DMA_IRQHandler+0x2f6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a73      	ldr	r2, [pc, #460]	@ (800191c <HAL_DMA_IRQHandler+0x458>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d030      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x2f0>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a72      	ldr	r2, [pc, #456]	@ (8001920 <HAL_DMA_IRQHandler+0x45c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d028      	beq.n	80017ae <HAL_DMA_IRQHandler+0x2ea>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a69      	ldr	r2, [pc, #420]	@ (8001908 <HAL_DMA_IRQHandler+0x444>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d020      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2e4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <HAL_DMA_IRQHandler+0x460>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d019      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2e0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6c      	ldr	r2, [pc, #432]	@ (8001928 <HAL_DMA_IRQHandler+0x464>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d012      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x2dc>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6b      	ldr	r2, [pc, #428]	@ (800192c <HAL_DMA_IRQHandler+0x468>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00a      	beq.n	800179a <HAL_DMA_IRQHandler+0x2d6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a69      	ldr	r2, [pc, #420]	@ (8001930 <HAL_DMA_IRQHandler+0x46c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <HAL_DMA_IRQHandler+0x2d0>
 800178e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001792:	e01b      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 8001794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001798:	e018      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 800179a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800179e:	e015      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017a0:	2320      	movs	r3, #32
 80017a2:	e013      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e011      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017ae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017c6:	2320      	movs	r3, #32
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x308>
 80017ca:	2302      	movs	r3, #2
 80017cc:	4a59      	ldr	r2, [pc, #356]	@ (8001934 <HAL_DMA_IRQHandler+0x470>)
 80017ce:	6053      	str	r3, [r2, #4]
 80017d0:	e057      	b.n	8001882 <HAL_DMA_IRQHandler+0x3be>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <HAL_DMA_IRQHandler+0x448>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04f      	beq.n	800187c <HAL_DMA_IRQHandler+0x3b8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001910 <HAL_DMA_IRQHandler+0x44c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d048      	beq.n	8001878 <HAL_DMA_IRQHandler+0x3b4>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001914 <HAL_DMA_IRQHandler+0x450>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d040      	beq.n	8001872 <HAL_DMA_IRQHandler+0x3ae>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a48      	ldr	r2, [pc, #288]	@ (8001918 <HAL_DMA_IRQHandler+0x454>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d038      	beq.n	800186c <HAL_DMA_IRQHandler+0x3a8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a47      	ldr	r2, [pc, #284]	@ (800191c <HAL_DMA_IRQHandler+0x458>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d030      	beq.n	8001866 <HAL_DMA_IRQHandler+0x3a2>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a45      	ldr	r2, [pc, #276]	@ (8001920 <HAL_DMA_IRQHandler+0x45c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d028      	beq.n	8001860 <HAL_DMA_IRQHandler+0x39c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a3d      	ldr	r2, [pc, #244]	@ (8001908 <HAL_DMA_IRQHandler+0x444>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d020      	beq.n	800185a <HAL_DMA_IRQHandler+0x396>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a41      	ldr	r2, [pc, #260]	@ (8001924 <HAL_DMA_IRQHandler+0x460>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_DMA_IRQHandler+0x392>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a40      	ldr	r2, [pc, #256]	@ (8001928 <HAL_DMA_IRQHandler+0x464>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0x38e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3e      	ldr	r2, [pc, #248]	@ (800192c <HAL_DMA_IRQHandler+0x468>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00a      	beq.n	800184c <HAL_DMA_IRQHandler+0x388>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a3d      	ldr	r2, [pc, #244]	@ (8001930 <HAL_DMA_IRQHandler+0x46c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_DMA_IRQHandler+0x382>
 8001840:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001844:	e01b      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001846:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800184a:	e018      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 800184c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001850:	e015      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001852:	2320      	movs	r3, #32
 8001854:	e013      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001856:	2302      	movs	r3, #2
 8001858:	e011      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 800185a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800185e:	e00e      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001860:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001864:	e00b      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001866:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800186a:	e008      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 800186c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001870:	e005      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001876:	e002      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 8001878:	2320      	movs	r3, #32
 800187a:	e000      	b.n	800187e <HAL_DMA_IRQHandler+0x3ba>
 800187c:	2302      	movs	r3, #2
 800187e:	4a2e      	ldr	r2, [pc, #184]	@ (8001938 <HAL_DMA_IRQHandler+0x474>)
 8001880:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d034      	beq.n	80018fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800189a:	e02f      	b.n	80018fc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	2208      	movs	r2, #8
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d028      	beq.n	80018fe <HAL_DMA_IRQHandler+0x43a>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d023      	beq.n	80018fe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 020e 	bic.w	r2, r2, #14
 80018c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    }
  }
  return;
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
}
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020080 	.word	0x40020080
 800190c:	40020008 	.word	0x40020008
 8001910:	4002001c 	.word	0x4002001c
 8001914:	40020030 	.word	0x40020030
 8001918:	40020044 	.word	0x40020044
 800191c:	40020058 	.word	0x40020058
 8001920:	4002006c 	.word	0x4002006c
 8001924:	40020408 	.word	0x40020408
 8001928:	4002041c 	.word	0x4002041c
 800192c:	40020430 	.word	0x40020430
 8001930:	40020444 	.word	0x40020444
 8001934:	40020400 	.word	0x40020400
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e179      	b.n	8001c44 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8168 	bne.w	8001c3e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a96      	ldr	r2, [pc, #600]	@ (8001bcc <HAL_GPIO_Init+0x290>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a94      	ldr	r2, [pc, #592]	@ (8001bcc <HAL_GPIO_Init+0x290>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a94      	ldr	r2, [pc, #592]	@ (8001bd0 <HAL_GPIO_Init+0x294>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a92      	ldr	r2, [pc, #584]	@ (8001bd0 <HAL_GPIO_Init+0x294>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a92      	ldr	r2, [pc, #584]	@ (8001bd4 <HAL_GPIO_Init+0x298>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a90      	ldr	r2, [pc, #576]	@ (8001bd4 <HAL_GPIO_Init+0x298>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a90      	ldr	r2, [pc, #576]	@ (8001bd8 <HAL_GPIO_Init+0x29c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd8 <HAL_GPIO_Init+0x29c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a8e      	ldr	r2, [pc, #568]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a8c      	ldr	r2, [pc, #560]	@ (8001bdc <HAL_GPIO_Init+0x2a0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a75      	ldr	r2, [pc, #468]	@ (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80c1 	beq.w	8001c3e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a48      	ldr	r2, [pc, #288]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a44      	ldr	r2, [pc, #272]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3c      	ldr	r2, [pc, #240]	@ (8001bec <HAL_GPIO_Init+0x2b0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d01f      	beq.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d019      	beq.n	8001b3c <HAL_GPIO_Init+0x200>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1fc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1f8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a38      	ldr	r2, [pc, #224]	@ (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1f4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a37      	ldr	r2, [pc, #220]	@ (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1f0>
 8001b28:	2305      	movs	r3, #5
 8001b2a:	e00a      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	e008      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b40:	2300      	movs	r3, #0
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b52:	4925      	ldr	r1, [pc, #148]	@ (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4924      	ldr	r1, [pc, #144]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7a:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4920      	ldr	r1, [pc, #128]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	491a      	ldr	r1, [pc, #104]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4916      	ldr	r1, [pc, #88]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d025      	beq.n	8001c08 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4910      	ldr	r1, [pc, #64]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
 8001bc8:	e025      	b.n	8001c16 <HAL_GPIO_Init+0x2da>
 8001bca:	bf00      	nop
 8001bcc:	10320000 	.word	0x10320000
 8001bd0:	10310000 	.word	0x10310000
 8001bd4:	10220000 	.word	0x10220000
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	10110000 	.word	0x10110000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40011800 	.word	0x40011800
 8001c00:	40011c00 	.word	0x40011c00
 8001c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4913      	ldr	r1, [pc, #76]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60cb      	str	r3, [r1, #12]
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4909      	ldr	r1, [pc, #36]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	3301      	adds	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f ae7e 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	372c      	adds	r7, #44	@ 0x2c
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e272      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8087 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb4:	4b92      	ldr	r3, [pc, #584]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00c      	beq.n	8001cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d112      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b89      	ldr	r3, [pc, #548]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d06c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d168      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e24c      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x76>
 8001cfc:	4b80      	ldr	r3, [pc, #512]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7f      	ldr	r2, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e02e      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x98>
 8001d12:	4b7b      	ldr	r3, [pc, #492]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7a      	ldr	r2, [pc, #488]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b78      	ldr	r3, [pc, #480]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a77      	ldr	r2, [pc, #476]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0xbc>
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a71      	ldr	r2, [pc, #452]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b6f      	ldr	r3, [pc, #444]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6e      	ldr	r2, [pc, #440]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d50:	4b6b      	ldr	r3, [pc, #428]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6a      	ldr	r2, [pc, #424]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b68      	ldr	r3, [pc, #416]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a67      	ldr	r2, [pc, #412]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f8d8 	bl	8000f24 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f8d4 	bl	8000f24 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e200      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe4>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff f8c4 	bl	8000f24 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f8c0 	bl	8000f24 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1ec      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x10c>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dce:	4b4c      	ldr	r3, [pc, #304]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dda:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d11c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
 8001de6:	4b46      	ldr	r3, [pc, #280]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e1c0      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4939      	ldr	r1, [pc, #228]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	e03a      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f879 	bl	8000f24 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff f875 	bl	8000f24 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e1a1      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4927      	ldr	r1, [pc, #156]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e015      	b.n	8001e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f858 	bl	8000f24 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff f854 	bl	8000f24 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e180      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03a      	beq.n	8001f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f838 	bl	8000f24 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f834 	bl	8000f24 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e160      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f000 fad8 	bl	800248c <RCC_Delay>
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f81e 	bl	8000f24 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f81a 	bl	8000f24 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d908      	bls.n	8001f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e146      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	42420000 	.word	0x42420000
 8001f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e9      	bne.n	8001eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a6 	beq.w	8002072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b88      	ldr	r3, [pc, #544]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a87      	ldr	r2, [pc, #540]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b85      	ldr	r3, [pc, #532]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b82      	ldr	r3, [pc, #520]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7e      	ldr	r2, [pc, #504]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe ffdb 	bl	8000f24 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe ffd7 	bl	8000f24 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	@ 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e103      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b75      	ldr	r3, [pc, #468]	@ (800215c <HAL_RCC_OscConfig+0x4c8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x312>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6213      	str	r3, [r2, #32]
 8001fa4:	e02d      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x334>
 8001fae:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a69      	ldr	r2, [pc, #420]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b67      	ldr	r3, [pc, #412]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a66      	ldr	r2, [pc, #408]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x356>
 8001fd0:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a60      	ldr	r2, [pc, #384]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x36e>
 8001fea:	4b5b      	ldr	r3, [pc, #364]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a5a      	ldr	r2, [pc, #360]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe ff8b 	bl	8000f24 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe ff87 	bl	8000f24 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0b1      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b4b      	ldr	r3, [pc, #300]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x37e>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7fe ff75 	bl	8000f24 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe ff71 	bl	8000f24 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e09b      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b3c      	ldr	r3, [pc, #240]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a3b      	ldr	r2, [pc, #236]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d061      	beq.n	800214c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d146      	bne.n	800211e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe ff45 	bl	8000f24 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe ff41 	bl	8000f24 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e06d      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d108      	bne.n	80020d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4921      	ldr	r1, [pc, #132]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a19      	ldr	r1, [r3, #32]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	430b      	orrs	r3, r1
 80020ea:	491b      	ldr	r1, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe ff15 	bl	8000f24 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7fe ff11 	bl	8000f24 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e03d      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x46a>
 800211c:	e035      	b.n	800218a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <HAL_RCC_OscConfig+0x4cc>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fefe 	bl	8000f24 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe fefa 	bl	8000f24 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e026      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x498>
 800214a:	e01e      	b.n	800218a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e019      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
 8002160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x500>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	429a      	cmp	r2, r3
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d0      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b67      	ldr	r3, [pc, #412]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4965      	ldr	r1, [pc, #404]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b8      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f4:	4b59      	ldr	r3, [pc, #356]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a58      	ldr	r2, [pc, #352]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800220c:	4b53      	ldr	r3, [pc, #332]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a52      	ldr	r2, [pc, #328]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b50      	ldr	r3, [pc, #320]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	494d      	ldr	r1, [pc, #308]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d040      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e073      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4936      	ldr	r1, [pc, #216]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7fe fe4c 	bl	8000f24 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7fe fe48 	bl	8000f24 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e053      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 020c 	and.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1eb      	bne.n	8002290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d210      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4922      	ldr	r1, [pc, #136]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e032      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4916      	ldr	r1, [pc, #88]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	490e      	ldr	r1, [pc, #56]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002326:	f000 f821 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800232a:	4602      	mov	r2, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	490a      	ldr	r1, [pc, #40]	@ (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	5ccb      	ldrb	r3, [r1, r3]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	4a09      	ldr	r2, [pc, #36]	@ (8002364 <HAL_RCC_ClockConfig+0x1cc>)
 8002340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCC_ClockConfig+0x1d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fdaa 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08003e58 	.word	0x08003e58
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b490      	push	{r4, r7}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002372:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <HAL_RCC_GetSysClockFreq+0xac>)
 8002374:	1d3c      	adds	r4, r7, #4
 8002376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800237c:	f240 2301 	movw	r3, #513	@ 0x201
 8002380:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x40>
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x46>
 80023aa:	e02b      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ae:	623b      	str	r3, [r7, #32]
      break;
 80023b0:	e02b      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	0c9b      	lsrs	r3, r3, #18
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3328      	adds	r3, #40	@ 0x28
 80023bc:	443b      	add	r3, r7
 80023be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d012      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c5b      	lsrs	r3, r3, #17
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	3328      	adds	r3, #40	@ 0x28
 80023da:	443b      	add	r3, r7
 80023dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e6:	fb03 f202 	mul.w	r2, r3, r2
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f2:	e004      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	623b      	str	r3, [r7, #32]
      break;
 8002402:	e002      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002406:	623b      	str	r3, [r7, #32]
      break;
 8002408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240a:	6a3b      	ldr	r3, [r7, #32]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3728      	adds	r7, #40	@ 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bc90      	pop	{r4, r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	08003e48 	.word	0x08003e48
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	003d0900 	.word	0x003d0900

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b02      	ldr	r3, [pc, #8]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff2 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08003e68 	.word	0x08003e68

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffde 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0adb      	lsrs	r3, r3, #11
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08003e68 	.word	0x08003e68

0800248c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002494:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <RCC_Delay+0x34>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <RCC_Delay+0x38>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a5b      	lsrs	r3, r3, #9
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a8:	bf00      	nop
  }
  while (Delay --);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <RCC_Delay+0x1c>
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000000 	.word	0x20000000
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e041      	b.n	800255e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fb3c 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fac2 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e041      	b.n	80025fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f839 	bl	8002604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f000 fa73 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
	...

08002618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_TIM_PWM_Start+0x24>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e022      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d109      	bne.n	8002656 <HAL_TIM_PWM_Start+0x3e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e015      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d109      	bne.n	8002670 <HAL_TIM_PWM_Start+0x58>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e008      	b.n	8002682 <HAL_TIM_PWM_Start+0x6a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e072      	b.n	8002770 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start+0x82>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002698:	e013      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start+0x92>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a8:	e00b      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_PWM_Start+0xa2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026b8:	e003      	b.n	80026c2 <HAL_TIM_PWM_Start+0xaa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fc9c 	bl	8003008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <HAL_TIM_PWM_Start+0x160>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_TIM_PWM_Start+0xcc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a27      	ldr	r2, [pc, #156]	@ (800277c <HAL_TIM_PWM_Start+0x164>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_TIM_PWM_Start+0xd0>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_TIM_PWM_Start+0xd2>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_TIM_PWM_Start+0x160>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_TIM_PWM_Start+0x122>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_TIM_PWM_Start+0x164>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_TIM_PWM_Start+0x122>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271a:	d00e      	beq.n	800273a <HAL_TIM_PWM_Start+0x122>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a17      	ldr	r2, [pc, #92]	@ (8002780 <HAL_TIM_PWM_Start+0x168>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_TIM_PWM_Start+0x122>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <HAL_TIM_PWM_Start+0x16c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIM_PWM_Start+0x122>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a14      	ldr	r2, [pc, #80]	@ (8002788 <HAL_TIM_PWM_Start+0x170>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d111      	bne.n	800275e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b06      	cmp	r3, #6
 800274a:	d010      	beq.n	800276e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	e007      	b.n	800276e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40013400 	.word	0x40013400
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00

0800278c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0ac      	b.n	8002900 <HAL_TIM_PWM_ConfigChannel+0x174>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	f200 809f 	bhi.w	80028f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80027b6:	a201      	add	r2, pc, #4	@ (adr r2, 80027bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	080028f5 	.word	0x080028f5
 80027c4:	080028f5 	.word	0x080028f5
 80027c8:	080028f5 	.word	0x080028f5
 80027cc:	08002831 	.word	0x08002831
 80027d0:	080028f5 	.word	0x080028f5
 80027d4:	080028f5 	.word	0x080028f5
 80027d8:	080028f5 	.word	0x080028f5
 80027dc:	08002873 	.word	0x08002873
 80027e0:	080028f5 	.word	0x080028f5
 80027e4:	080028f5 	.word	0x080028f5
 80027e8:	080028f5 	.word	0x080028f5
 80027ec:	080028b3 	.word	0x080028b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f9c4 	bl	8002b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0208 	orr.w	r2, r2, #8
 800280a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6999      	ldr	r1, [r3, #24]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	619a      	str	r2, [r3, #24]
      break;
 800282e:	e062      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fa14 	bl	8002c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6999      	ldr	r1, [r3, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	619a      	str	r2, [r3, #24]
      break;
 8002870:	e041      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fa67 	bl	8002d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0208 	orr.w	r2, r2, #8
 800288c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0204 	bic.w	r2, r2, #4
 800289c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69d9      	ldr	r1, [r3, #28]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	61da      	str	r2, [r3, #28]
      break;
 80028b0:	e021      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fabb 	bl	8002e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69d9      	ldr	r1, [r3, #28]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	61da      	str	r2, [r3, #28]
      break;
 80028f2:	e000      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80028f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIM_ConfigClockSource+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e0b3      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x180>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800293e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002946:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002958:	d03e      	beq.n	80029d8 <HAL_TIM_ConfigClockSource+0xd0>
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295e:	f200 8087 	bhi.w	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002966:	f000 8085 	beq.w	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296e:	d87f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002970:	2b70      	cmp	r3, #112	@ 0x70
 8002972:	d01a      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0xa2>
 8002974:	2b70      	cmp	r3, #112	@ 0x70
 8002976:	d87b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002978:	2b60      	cmp	r3, #96	@ 0x60
 800297a:	d050      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x116>
 800297c:	2b60      	cmp	r3, #96	@ 0x60
 800297e:	d877      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002980:	2b50      	cmp	r3, #80	@ 0x50
 8002982:	d03c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xf6>
 8002984:	2b50      	cmp	r3, #80	@ 0x50
 8002986:	d873      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002988:	2b40      	cmp	r3, #64	@ 0x40
 800298a:	d058      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x136>
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d86f      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002990:	2b30      	cmp	r3, #48	@ 0x30
 8002992:	d064      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x156>
 8002994:	2b30      	cmp	r3, #48	@ 0x30
 8002996:	d86b      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d060      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x156>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d867      	bhi.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d05c      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x156>
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d05a      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029a8:	e062      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f000 fb06 	bl	8002fca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	609a      	str	r2, [r3, #8]
      break;
 80029d6:	e04e      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f000 faef 	bl	8002fca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029fa:	609a      	str	r2, [r3, #8]
      break;
 80029fc:	e03b      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 fa66 	bl	8002edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2150      	movs	r1, #80	@ 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fabd 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e02b      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f000 fa84 	bl	8002f38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2160      	movs	r1, #96	@ 0x60
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 faad 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a3c:	e01b      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 fa46 	bl	8002edc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2140      	movs	r1, #64	@ 0x40
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fa9d 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 fa94 	bl	8002f96 <TIM_ITRx_SetConfig>
        break;
 8002a6e:	e002      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a33      	ldr	r2, [pc, #204]	@ (8002b70 <TIM_Base_SetConfig+0xe0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <TIM_Base_SetConfig+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00f      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	@ (8002b78 <TIM_Base_SetConfig+0xe8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b7c <TIM_Base_SetConfig+0xec>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a2d      	ldr	r2, [pc, #180]	@ (8002b80 <TIM_Base_SetConfig+0xf0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	@ (8002b70 <TIM_Base_SetConfig+0xe0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <TIM_Base_SetConfig+0x82>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a21      	ldr	r2, [pc, #132]	@ (8002b74 <TIM_Base_SetConfig+0xe4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x82>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <TIM_Base_SetConfig+0xe8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x82>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <TIM_Base_SetConfig+0xec>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <TIM_Base_SetConfig+0xf0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <TIM_Base_SetConfig+0xe0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_Base_SetConfig+0xc8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <TIM_Base_SetConfig+0xe4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d103      	bne.n	8002b60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	615a      	str	r2, [r3, #20]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40013400 	.word	0x40013400
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	40000c00 	.word	0x40000c00

08002b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <TIM_OC1_SetConfig+0xd8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_OC1_SetConfig+0x64>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <TIM_OC1_SetConfig+0xdc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10c      	bne.n	8002c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0308 	bic.w	r3, r3, #8
 8002bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a15      	ldr	r2, [pc, #84]	@ (8002c5c <TIM_OC1_SetConfig+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_OC1_SetConfig+0x8e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <TIM_OC1_SetConfig+0xdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d111      	bne.n	8002c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40013400 	.word	0x40013400

08002c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0210 	bic.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0320 	bic.w	r3, r3, #32
 8002cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <TIM_OC2_SetConfig+0xe0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_OC2_SetConfig+0x68>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a20      	ldr	r2, [pc, #128]	@ (8002d48 <TIM_OC2_SetConfig+0xe4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10d      	bne.n	8002ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <TIM_OC2_SetConfig+0xe0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC2_SetConfig+0x94>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <TIM_OC2_SetConfig+0xe4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d113      	bne.n	8002d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40013400 	.word	0x40013400

08002d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a21      	ldr	r2, [pc, #132]	@ (8002e2c <TIM_OC3_SetConfig+0xe0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_OC3_SetConfig+0x66>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <TIM_OC3_SetConfig+0xe4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10d      	bne.n	8002dce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a16      	ldr	r2, [pc, #88]	@ (8002e2c <TIM_OC3_SetConfig+0xe0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_OC3_SetConfig+0x92>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <TIM_OC3_SetConfig+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d113      	bne.n	8002e06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40013400 	.word	0x40013400

08002e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	031b      	lsls	r3, r3, #12
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <TIM_OC4_SetConfig+0xa0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_OC4_SetConfig+0x68>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a10      	ldr	r2, [pc, #64]	@ (8002ed8 <TIM_OC4_SetConfig+0xa4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d109      	bne.n	8002eb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	019b      	lsls	r3, r3, #6
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40013400 	.word	0x40013400

08002edc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0201 	bic.w	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f023 030a 	bic.w	r3, r3, #10
 8002f18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 0210 	bic.w	r2, r3, #16
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	031b      	lsls	r3, r3, #12
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	621a      	str	r2, [r3, #32]
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f043 0307 	orr.w	r3, r3, #7
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	609a      	str	r2, [r3, #8]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2201      	movs	r2, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_TIMEx_PWMN_Start+0x24>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e022      	b.n	80030ba <HAL_TIMEx_PWMN_Start+0x6a>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d109      	bne.n	800308e <HAL_TIMEx_PWMN_Start+0x3e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e015      	b.n	80030ba <HAL_TIMEx_PWMN_Start+0x6a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d109      	bne.n	80030a8 <HAL_TIMEx_PWMN_Start+0x58>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e008      	b.n	80030ba <HAL_TIMEx_PWMN_Start+0x6a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e063      	b.n	800318a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_TIMEx_PWMN_Start+0x82>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030d0:	e013      	b.n	80030fa <HAL_TIMEx_PWMN_Start+0xaa>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d104      	bne.n	80030e2 <HAL_TIMEx_PWMN_Start+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030e0:	e00b      	b.n	80030fa <HAL_TIMEx_PWMN_Start+0xaa>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d104      	bne.n	80030f2 <HAL_TIMEx_PWMN_Start+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f0:	e003      	b.n	80030fa <HAL_TIMEx_PWMN_Start+0xaa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2204      	movs	r2, #4
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f90d 	bl	8003322 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003116:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_TIMEx_PWMN_Start+0x144>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d018      	beq.n	8003154 <HAL_TIMEx_PWMN_Start+0x104>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_TIMEx_PWMN_Start+0x148>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_TIMEx_PWMN_Start+0x104>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003134:	d00e      	beq.n	8003154 <HAL_TIMEx_PWMN_Start+0x104>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_TIMEx_PWMN_Start+0x14c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIMEx_PWMN_Start+0x104>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <HAL_TIMEx_PWMN_Start+0x150>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIMEx_PWMN_Start+0x104>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <HAL_TIMEx_PWMN_Start+0x154>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40013400 	.word	0x40013400
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00

080031a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e050      	b.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d018      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d00e      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a15      	ldr	r2, [pc, #84]	@ (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a12      	ldr	r2, [pc, #72]	@ (800327c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800323c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40013400 	.word	0x40013400
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00

08003280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e03d      	b.n	8003318 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003322:	b480      	push	{r7}
 8003324:	b087      	sub	sp, #28
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2204      	movs	r2, #4
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	431a      	orrs	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e03f      	b.n	80033fc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fccb 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2224      	movs	r2, #36	@ 0x24
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fc84 	bl	8003cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	@ 0x28
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	d17c      	bne.n	800351e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_UART_Transmit+0x2c>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e075      	b.n	8003520 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_UART_Transmit+0x3e>
 800343e:	2302      	movs	r3, #2
 8003440:	e06e      	b.n	8003520 <HAL_UART_Transmit+0x11c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2221      	movs	r2, #33	@ 0x21
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003458:	f7fd fd64 	bl	8000f24 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003472:	d108      	bne.n	8003486 <HAL_UART_Transmit+0x82>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e003      	b.n	800348e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003496:	e02a      	b.n	80034ee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa37 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e036      	b.n	8003520 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	3302      	adds	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e007      	b.n	80034e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1cf      	bne.n	8003498 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	2140      	movs	r1, #64	@ 0x40
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa07 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e006      	b.n	8003520 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d11d      	bne.n	800357e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_Receive_IT+0x26>
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e016      	b.n	8003580 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UART_Receive_IT+0x38>
 800355c:	2302      	movs	r3, #2
 800355e:	e00f      	b.n	8003580 <HAL_UART_Receive_IT+0x58>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	461a      	mov	r2, r3
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fa18 	bl	80039aa <UART_Start_Receive_IT>
 800357a:	4603      	mov	r3, r0
 800357c:	e000      	b.n	8003580 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fac9 	bl	8003b6a <UART_Receive_IT>
      return;
 80035d8:	e17b      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80b1 	beq.w	8003744 <HAL_UART_IRQHandler+0x1bc>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_UART_IRQHandler+0x70>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_UART_IRQHandler+0xee>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 811e 	beq.w	80038c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_UART_IRQHandler+0x11e>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fa62 	bl	8003b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_UART_IRQHandler+0x146>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d031      	beq.n	8003732 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9a4 	bl	8003a1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d023      	beq.n	800372a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	4a76      	ldr	r2, [pc, #472]	@ (80038d8 <HAL_UART_IRQHandler+0x350>)
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fdd4 	bl	80012b4 <HAL_DMA_Abort_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00e      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8e3 	bl	80038ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e00a      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8df 	bl	80038ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e006      	b.n	8003740 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8db 	bl	80038ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800373e:	e0c3      	b.n	80038c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	bf00      	nop
    return;
 8003742:	e0c1      	b.n	80038c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 80a1 	bne.w	8003890 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 809b 	beq.w	8003890 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8095 	beq.w	8003890 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04e      	beq.n	8003828 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003794:	8a3b      	ldrh	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8098 	beq.w	80038cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037a0:	8a3a      	ldrh	r2, [r7, #16]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	f080 8092 	bcs.w	80038cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8a3a      	ldrh	r2, [r7, #16]
 80037ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d02b      	beq.n	8003810 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fd18 	bl	8001240 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f86d 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003826:	e051      	b.n	80038cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003830:	b29b      	uxth	r3, r3
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d047      	beq.n	80038d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003840:	8a7b      	ldrh	r3, [r7, #18]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003854:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0210 	bic.w	r2, r2, #16
 8003882:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003884:	8a7b      	ldrh	r3, [r7, #18]
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f839 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800388e:	e01f      	b.n	80038d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_UART_IRQHandler+0x324>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8f9 	bl	8003a9c <UART_Transmit_IT>
    return;
 80038aa:	e012      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_UART_IRQHandler+0x34a>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f93a 	bl	8003b3a <UART_EndTransmit_IT>
    return;
 80038c6:	e004      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80038c8:	bf00      	nop
 80038ca:	e002      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80038d0:	bf00      	nop
  }
}
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08003a75 	.word	0x08003a75

080038dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e02c      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d028      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
 8003936:	f7fd faf5 	bl	8000f24 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	429a      	cmp	r2, r3
 8003944:	d21d      	bcs.n	8003982 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003954:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d0c3      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	4613      	mov	r3, r2
 80039b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2222      	movs	r2, #34	@ 0x22
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0220 	orr.w	r2, r2, #32
 8003a0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003a32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff ff2d 	bl	80038ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b21      	cmp	r3, #33	@ 0x21
 8003aae:	d13e      	bne.n	8003b2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d114      	bne.n	8003ae4 <UART_Transmit_IT+0x48>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d110      	bne.n	8003ae4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]
 8003ae2:	e008      	b.n	8003af6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	1c59      	adds	r1, r3, #1
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6211      	str	r1, [r2, #32]
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4619      	mov	r1, r3
 8003b04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff febe 	bl	80038dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b22      	cmp	r3, #34	@ 0x22
 8003b7c:	f040 8099 	bne.w	8003cb2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b88:	d117      	bne.n	8003bba <UART_Receive_IT+0x50>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d113      	bne.n	8003bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bb8:	e026      	b.n	8003c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bcc:	d007      	beq.n	8003bde <UART_Receive_IT+0x74>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <UART_Receive_IT+0x82>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e008      	b.n	8003bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4619      	mov	r1, r3
 8003c16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d148      	bne.n	8003cae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0220 	bic.w	r2, r2, #32
 8003c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d123      	bne.n	8003ca4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0210 	bic.w	r2, r2, #16
 8003c70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d10a      	bne.n	8003c96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fe2f 	bl	8003900 <HAL_UARTEx_RxEventCallback>
 8003ca2:	e002      	b.n	8003caa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fc fc67 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e002      	b.n	8003cb4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cf6:	f023 030c 	bic.w	r3, r3, #12
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd0 <UART_SetConfig+0x114>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fb9e 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	e002      	b.n	8003d32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fb86 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003d30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009a      	lsls	r2, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	4a22      	ldr	r2, [pc, #136]	@ (8003dd4 <UART_SetConfig+0x118>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	0119      	lsls	r1, r3, #4
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009a      	lsls	r2, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <UART_SetConfig+0x118>)
 8003d6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2064      	movs	r0, #100	@ 0x64
 8003d72:	fb00 f303 	mul.w	r3, r0, r3
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	3332      	adds	r3, #50	@ 0x32
 8003d7c:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <UART_SetConfig+0x118>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d88:	4419      	add	r1, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009a      	lsls	r2, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <UART_SetConfig+0x118>)
 8003da2:	fba3 0302 	umull	r0, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2064      	movs	r0, #100	@ 0x64
 8003daa:	fb00 f303 	mul.w	r3, r0, r3
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	3332      	adds	r3, #50	@ 0x32
 8003db4:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <UART_SetConfig+0x118>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40013800 	.word	0x40013800
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <memset>:
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4402      	add	r2, r0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d100      	bne.n	8003de2 <memset+0xa>
 8003de0:	4770      	bx	lr
 8003de2:	f803 1b01 	strb.w	r1, [r3], #1
 8003de6:	e7f9      	b.n	8003ddc <memset+0x4>

08003de8 <__libc_init_array>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	2600      	movs	r6, #0
 8003dec:	4d0c      	ldr	r5, [pc, #48]	@ (8003e20 <__libc_init_array+0x38>)
 8003dee:	4c0d      	ldr	r4, [pc, #52]	@ (8003e24 <__libc_init_array+0x3c>)
 8003df0:	1b64      	subs	r4, r4, r5
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	42a6      	cmp	r6, r4
 8003df6:	d109      	bne.n	8003e0c <__libc_init_array+0x24>
 8003df8:	f000 f81a 	bl	8003e30 <_init>
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	4d0a      	ldr	r5, [pc, #40]	@ (8003e28 <__libc_init_array+0x40>)
 8003e00:	4c0a      	ldr	r4, [pc, #40]	@ (8003e2c <__libc_init_array+0x44>)
 8003e02:	1b64      	subs	r4, r4, r5
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	42a6      	cmp	r6, r4
 8003e08:	d105      	bne.n	8003e16 <__libc_init_array+0x2e>
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e10:	4798      	blx	r3
 8003e12:	3601      	adds	r6, #1
 8003e14:	e7ee      	b.n	8003df4 <__libc_init_array+0xc>
 8003e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1a:	4798      	blx	r3
 8003e1c:	3601      	adds	r6, #1
 8003e1e:	e7f2      	b.n	8003e06 <__libc_init_array+0x1e>
 8003e20:	08003e70 	.word	0x08003e70
 8003e24:	08003e70 	.word	0x08003e70
 8003e28:	08003e70 	.word	0x08003e70
 8003e2c:	08003e74 	.word	0x08003e74

08003e30 <_init>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr

08003e3c <_fini>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr
