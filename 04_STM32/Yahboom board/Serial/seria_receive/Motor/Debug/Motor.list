
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f24  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004130  08004130  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004130  08004130  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004130  08004130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004134  08004134  00005134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004138  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  08004148  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004148  00006158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3e4  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002694  00000000  00000000  0001141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00013ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  00014810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad03  00000000  00000000  00015257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001171b  00000000  00000000  0002ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009853f  00000000  00000000  00041675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000d9bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000dd0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080040f0 	.word	0x080040f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080040f0 	.word	0x080040f0

08000224 <Bsp_Led_Show_State_Handle>:
#include "bsp.h"

// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	@ (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f001 fe6b 	bl	8001f22 <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000002c 	.word	0x2000002c
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Beep_On_Time(50);
 800025c:	2032      	movs	r0, #50	@ 0x32
 800025e:	f000 f8b3 	bl	80003c8 <Beep_On_Time>
	Motor_Init();
 8000262:	f000 f96d 	bl	8000540 <Motor_Init>
	USART1_Init();
 8000266:	f000 fa73 	bl	8000750 <USART1_Init>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000276:	2001      	movs	r0, #1
 8000278:	f000 f918 	bl	80004ac <Key1_State>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d05c      	beq.n	800033c <Bsp_Loop+0xcc>
	{
		Beep_On_Time(50);
 8000282:	2032      	movs	r0, #50	@ 0x32
 8000284:	f000 f8a0 	bl	80003c8 <Beep_On_Time>

		static char press = 'a';
		USART1_Send_U8(press);
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <Bsp_Loop+0xe4>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa6d 	bl	800076c <USART1_Send_U8>
		//static int press = 0;
		//press++;
		//printf("press:%d\n", press);

		static int state = 0;
		state++;
 8000292:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <Bsp_Loop+0xe8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	4a2f      	ldr	r2, [pc, #188]	@ (8000358 <Bsp_Loop+0xe8>)
 800029a:	6013      	str	r3, [r2, #0]
		int speed = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
		if (state == 1)
 80002a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <Bsp_Loop+0xe8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d11a      	bne.n	80002de <Bsp_Loop+0x6e>
		{
			speed = 2000;
 80002a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80002ac:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	b21b      	sxth	r3, r3
 80002b2:	4619      	mov	r1, r3
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 f9b7 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	b21b      	sxth	r3, r3
 80002be:	4619      	mov	r1, r3
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 f9b1 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	b21b      	sxth	r3, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	2002      	movs	r0, #2
 80002ce:	f000 f9ab 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	4619      	mov	r1, r3
 80002d8:	2003      	movs	r0, #3
 80002da:	f000 f9a5 	bl	8000628 <Motor_Set_Pwm>
		}
		if (state == 2)
 80002de:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <Bsp_Loop+0xe8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d102      	bne.n	80002ec <Bsp_Loop+0x7c>
		{
			Motor_Stop(0);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f952 	bl	8000590 <Motor_Stop>
		}
		if (state == 3)
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <Bsp_Loop+0xe8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d119      	bne.n	8000328 <Bsp_Loop+0xb8>
		{
			speed = -2000;
 80002f4:	4b19      	ldr	r3, [pc, #100]	@ (800035c <Bsp_Loop+0xec>)
 80002f6:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	2000      	movs	r0, #0
 8000300:	f000 f992 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b21b      	sxth	r3, r3
 8000308:	4619      	mov	r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	f000 f98c 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	b21b      	sxth	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	2002      	movs	r0, #2
 8000318:	f000 f986 	bl	8000628 <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	b21b      	sxth	r3, r3
 8000320:	4619      	mov	r1, r3
 8000322:	2003      	movs	r0, #3
 8000324:	f000 f980 	bl	8000628 <Motor_Set_Pwm>
		}
		if (state == 4)
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <Bsp_Loop+0xe8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d105      	bne.n	800033c <Bsp_Loop+0xcc>
		{
			state = 0;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <Bsp_Loop+0xe8>)
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
			Motor_Stop(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f000 f92a 	bl	8000590 <Motor_Stop>
		}

	}

	Bsp_Led_Show_State_Handle();
 800033c:	f7ff ff72 	bl	8000224 <Bsp_Led_Show_State_Handle>
	Beep_Timeout_Close_Handle();
 8000340:	f000 f882 	bl	8000448 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 8000344:	200a      	movs	r0, #10
 8000346:	f000 ff03 	bl	8001150 <HAL_Delay>
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000
 8000358:	20000030 	.word	0x20000030
 800035c:	fffff830 	.word	0xfffff830

08000360 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 800036a:	4a04      	ldr	r2, [pc, #16]	@ (800037c <Beep_Set_Time+0x1c>)
 800036c:	88fb      	ldrh	r3, [r7, #6]
 800036e:	8013      	strh	r3, [r2, #0]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000034 	.word	0x20000034

08000380 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000384:	4b02      	ldr	r3, [pc, #8]	@ (8000390 <Beep_Get_Time+0x10>)
 8000386:	881b      	ldrh	r3, [r3, #0]
}
 8000388:	4618      	mov	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	20000034 	.word	0x20000034

08000394 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800039e:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <Beep_Set_State+0x1c>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	7013      	strb	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000036 	.word	0x20000036

080003b4 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	return beep_state;
 80003b8:	4b02      	ldr	r3, [pc, #8]	@ (80003c4 <Beep_Get_State+0x10>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000036 	.word	0x20000036

080003c8 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10b      	bne.n	80003f0 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ffdb 	bl	8000394 <Beep_Set_State>
		Beep_Set_Time(0);
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff ffbe 	bl	8000360 <Beep_Set_Time>
		BEEP_ON();
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	4815      	ldr	r0, [pc, #84]	@ (8000440 <Beep_On_Time+0x78>)
 80003ea:	f001 fd82 	bl	8001ef2 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 80003ee:	e022      	b.n	8000436 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d10b      	bne.n	800040e <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff ffcc 	bl	8000394 <Beep_Set_State>
		Beep_Set_Time(0);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff ffaf 	bl	8000360 <Beep_Set_Time>
		BEEP_OFF();
 8000402:	2200      	movs	r2, #0
 8000404:	2120      	movs	r1, #32
 8000406:	480e      	ldr	r0, [pc, #56]	@ (8000440 <Beep_On_Time+0x78>)
 8000408:	f001 fd73 	bl	8001ef2 <HAL_GPIO_WritePin>
}
 800040c:	e013      	b.n	8000436 <Beep_On_Time+0x6e>
		if (time >= 10)
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d910      	bls.n	8000436 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff ffbd 	bl	8000394 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	4a09      	ldr	r2, [pc, #36]	@ (8000444 <Beep_On_Time+0x7c>)
 800041e:	fba2 2303 	umull	r2, r3, r2, r3
 8000422:	08db      	lsrs	r3, r3, #3
 8000424:	b29b      	uxth	r3, r3
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff9a 	bl	8000360 <Beep_Set_Time>
			BEEP_ON();
 800042c:	2201      	movs	r2, #1
 800042e:	2120      	movs	r1, #32
 8000430:	4803      	ldr	r0, [pc, #12]	@ (8000440 <Beep_On_Time+0x78>)
 8000432:	f001 fd5e 	bl	8001ef2 <HAL_GPIO_WritePin>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40011000 	.word	0x40011000
 8000444:	cccccccd 	.word	0xcccccccd

08000448 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 800044c:	f7ff ffb2 	bl	80003b4 <Beep_Get_State>
 8000450:	4603      	mov	r3, r0
 8000452:	2b02      	cmp	r3, #2
 8000454:	d113      	bne.n	800047e <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000456:	f7ff ff93 	bl	8000380 <Beep_Get_Time>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d006      	beq.n	800046e <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <Beep_Timeout_Close_Handle+0x3c>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	3b01      	subs	r3, #1
 8000466:	b29a      	uxth	r2, r3
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <Beep_Timeout_Close_Handle+0x3c>)
 800046a:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800046c:	e007      	b.n	800047e <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800046e:	2200      	movs	r2, #0
 8000470:	2120      	movs	r1, #32
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <Beep_Timeout_Close_Handle+0x40>)
 8000474:	f001 fd3d 	bl	8001ef2 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff8b 	bl	8000394 <Beep_Set_State>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000034 	.word	0x20000034
 8000488:	40011000 	.word	0x40011000

0800048c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000490:	2104      	movs	r1, #4
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <Key1_is_Press+0x1c>)
 8000494:	f001 fd16 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d101      	bne.n	80004a2 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800049e:	2301      	movs	r3, #1
 80004a0:	e000      	b.n	80004a4 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40011400 	.word	0x40011400

080004ac <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 80004b6:	f7ff ffe9 	bl	800048c <Key1_is_Press>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d10e      	bne.n	80004de <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80004c0:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <Key1_State+0x50>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	3301      	adds	r3, #1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	429a      	cmp	r2, r3
 80004ce:	da09      	bge.n	80004e4 <Key1_State+0x38>
		{
			key1_state++;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <Key1_State+0x50>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <Key1_State+0x50>)
 80004da:	801a      	strh	r2, [r3, #0]
 80004dc:	e002      	b.n	80004e4 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <Key1_State+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <Key1_State+0x50>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d101      	bne.n	80004f0 <Key1_State+0x44>
	{
		return KEY_PRESS;
 80004ec:	2301      	movs	r3, #1
 80004ee:	e000      	b.n	80004f2 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000038 	.word	0x20000038

08000500 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	2b00      	cmp	r3, #0
 8000510:	dd05      	ble.n	800051e <Motor_Ignore_Dead_Zone+0x1e>
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8000518:	b29b      	uxth	r3, r3
 800051a:	b21b      	sxth	r3, r3
 800051c:	e00a      	b.n	8000534 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 800051e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000522:	2b00      	cmp	r3, #0
 8000524:	da05      	bge.n	8000532 <Motor_Ignore_Dead_Zone+0x32>
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 800052c:	b29b      	uxth	r3, r3
 800052e:	b21b      	sxth	r3, r3
 8000530:	e000      	b.n	8000534 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 8000532:	2300      	movs	r3, #0
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
	...

08000540 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	4810      	ldr	r0, [pc, #64]	@ (8000588 <Motor_Init+0x48>)
 8000548:	f002 f9c6 	bl	80028d8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800054c:	2104      	movs	r1, #4
 800054e:	480e      	ldr	r0, [pc, #56]	@ (8000588 <Motor_Init+0x48>)
 8000550:	f002 fede 	bl	8003310 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000554:	2108      	movs	r1, #8
 8000556:	480c      	ldr	r0, [pc, #48]	@ (8000588 <Motor_Init+0x48>)
 8000558:	f002 feda 	bl	8003310 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800055c:	210c      	movs	r1, #12
 800055e:	480a      	ldr	r0, [pc, #40]	@ (8000588 <Motor_Init+0x48>)
 8000560:	f002 f9ba 	bl	80028d8 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	4809      	ldr	r0, [pc, #36]	@ (800058c <Motor_Init+0x4c>)
 8000568:	f002 f9b6 	bl	80028d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <Motor_Init+0x4c>)
 8000570:	f002 f9b2 	bl	80028d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000574:	2108      	movs	r1, #8
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <Motor_Init+0x4c>)
 8000578:	f002 f9ae 	bl	80028d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800057c:	210c      	movs	r1, #12
 800057e:	4803      	ldr	r0, [pc, #12]	@ (800058c <Motor_Init+0x4c>)
 8000580:	f002 f9aa 	bl	80028d8 <HAL_TIM_PWM_Start>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000003c 	.word	0x2000003c
 800058c:	20000084 	.word	0x20000084

08000590 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <Motor_Stop+0x14>
 80005a0:	2301      	movs	r3, #1
 80005a2:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005aa:	fb03 f202 	mul.w	r2, r3, r2
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <Motor_Stop+0x90>)
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005b8:	fb03 f202 	mul.w	r2, r3, r2
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <Motor_Stop+0x90>)
 80005be:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005c6:	fb03 f202 	mul.w	r2, r3, r2
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <Motor_Stop+0x90>)
 80005cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005d4:	fb03 f202 	mul.w	r2, r3, r2
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <Motor_Stop+0x90>)
 80005da:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005e2:	fb03 f202 	mul.w	r2, r3, r2
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <Motor_Stop+0x94>)
 80005e8:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005f0:	fb03 f202 	mul.w	r2, r3, r2
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <Motor_Stop+0x94>)
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80005fe:	fb03 f202 	mul.w	r2, r3, r2
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <Motor_Stop+0x94>)
 8000604:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800060c:	fb03 f202 	mul.w	r2, r3, r2
 8000610:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <Motor_Stop+0x94>)
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40013400 	.word	0x40013400
 8000624:	40012c00 	.word	0x40012c00

08000628 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8000638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff5f 	bl	8000500 <Motor_Ignore_Dead_Zone>
 8000642:	4603      	mov	r3, r0
 8000644:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8000646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800064a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800064e:	db02      	blt.n	8000656 <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8000650:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000654:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8000656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800065a:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800065e:	dc02      	bgt.n	8000666 <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8000660:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8000664:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d867      	bhi.n	800073c <Motor_Set_Pwm+0x114>
 800066c:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <Motor_Set_Pwm+0x4c>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000685 	.word	0x08000685
 8000678:	080006b7 	.word	0x080006b7
 800067c:	080006e9 	.word	0x080006e9
 8000680:	08000713 	.word	0x08000713
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8000684:	89fb      	ldrh	r3, [r7, #14]
 8000686:	425b      	negs	r3, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 800068c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db07      	blt.n	80006a4 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8000694:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <Motor_Set_Pwm+0x120>)
 8000696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800069a:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 800069c:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <Motor_Set_Pwm+0x120>)
 800069e:	2200      	movs	r2, #0
 80006a0:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80006a2:	e04c      	b.n	800073e <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 80006aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ae:	425a      	negs	r2, r3
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006b2:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80006b4:	e043      	b.n	800073e <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	425b      	negs	r3, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80006be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db07      	blt.n	80006d6 <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80006c6:	4a20      	ldr	r2, [pc, #128]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80006d4:	e033      	b.n	800073e <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006d8:	2200      	movs	r2, #0
 80006da:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 80006dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006e0:	425a      	negs	r2, r3
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <Motor_Set_Pwm+0x120>)
 80006e4:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80006e6:	e02a      	b.n	800073e <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 80006e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db07      	blt.n	8000700 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80006f0:	4a16      	ldr	r2, [pc, #88]	@ (800074c <Motor_Set_Pwm+0x124>)
 80006f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
            PWM_M3_B = 0;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <Motor_Set_Pwm+0x124>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 80006fe:	e01e      	b.n	800073e <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <Motor_Set_Pwm+0x124>)
 8000702:	2200      	movs	r2, #0
 8000704:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 8000706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800070a:	425a      	negs	r2, r3
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <Motor_Set_Pwm+0x124>)
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8000710:	e015      	b.n	800073e <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 8000712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db07      	blt.n	800072a <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 800071a:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <Motor_Set_Pwm+0x124>)
 800071c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000720:	6393      	str	r3, [r2, #56]	@ 0x38
            PWM_M4_B = 0;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <Motor_Set_Pwm+0x124>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	@ 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8000728:	e009      	b.n	800073e <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <Motor_Set_Pwm+0x124>)
 800072c:	2200      	movs	r2, #0
 800072e:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 8000730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000734:	425a      	negs	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <Motor_Set_Pwm+0x124>)
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800073a:	e000      	b.n	800073e <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 800073c:	bf00      	nop
    }
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40013400 	.word	0x40013400
 800074c:	40012c00 	.word	0x40012c00

08000750 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	4903      	ldr	r1, [pc, #12]	@ (8000764 <USART1_Init+0x14>)
 8000758:	4803      	ldr	r0, [pc, #12]	@ (8000768 <USART1_Init+0x18>)
 800075a:	f003 f845 	bl	80037e8 <HAL_UART_Receive_IT>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000003a 	.word	0x2000003a
 8000768:	200000cc 	.word	0x200000cc

0800076c <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000776:	1df9      	adds	r1, r7, #7
 8000778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077c:	2201      	movs	r2, #1
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <USART1_Send_U8+0x20>)
 8000780:	f002 ffa0 	bl	80036c4 <HAL_UART_Transmit>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000cc 	.word	0x200000cc

08000790 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_UART_RxCpltCallback+0x24>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffe5 	bl	800076c <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	4903      	ldr	r1, [pc, #12]	@ (80007b4 <HAL_UART_RxCpltCallback+0x24>)
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <HAL_UART_RxCpltCallback+0x28>)
 80007a8:	f003 f81e 	bl	80037e8 <HAL_UART_Receive_IT>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000003a 	.word	0x2000003a
 80007b8:	200000cc 	.word	0x200000cc

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_DMA_Init+0x38>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <MX_DMA_Init+0x38>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_DMA_Init+0x38>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	200e      	movs	r0, #14
 80007e0:	f000 fdb1 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007e4:	200e      	movs	r0, #14
 80007e6:	f000 fdca 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080c:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0320 	and.w	r3, r3, #32
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_GPIO_Init+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000872:	4812      	ldr	r0, [pc, #72]	@ (80008bc <MX_GPIO_Init+0xc4>)
 8000874:	f001 fb3d 	bl	8001ef2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000878:	f242 0320 	movw	r3, #8224	@ 0x2020
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	4619      	mov	r1, r3
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <MX_GPIO_Init+0xc4>)
 8000892:	f001 f983 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000896:	2304      	movs	r3, #4
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_GPIO_Init+0xc8>)
 80008aa:	f001 f977 	bl	8001b9c <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40011400 	.word	0x40011400

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fbe0 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f80f 	bl	80008ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f7ff ff92 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d4:	f7ff ff72 	bl	80007bc <MX_DMA_Init>
  MX_TIM1_Init();
 80008d8:	f000 f8cc 	bl	8000a74 <MX_TIM1_Init>
  MX_TIM8_Init();
 80008dc:	f000 f98e 	bl	8000bfc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 fb06 	bl	8000ef0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 80008e4:	f7ff fcb8 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 80008e8:	f7ff fcc2 	bl	8000270 <Bsp_Loop>
 80008ec:	e7fc      	b.n	80008e8 <main+0x24>

080008ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b090      	sub	sp, #64	@ 0x40
 80008f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	2228      	movs	r2, #40	@ 0x28
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fbcb 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800092c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fb0c 	bl	8001f54 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000942:	f000 f819 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2102      	movs	r1, #2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fd79 	bl	8002458 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800096c:	f000 f804 	bl	8000978 <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3740      	adds	r7, #64	@ 0x40
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <HAL_MspInit+0x5c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_MspInit+0x60>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_MspInit+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 fb6e 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <DMA1_Channel4_IRQHandler+0x10>)
 8000a46:	f000 fe6d 	bl	8001724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000110 	.word	0x20000110

08000a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <USART1_IRQHandler+0x10>)
 8000a5a:	f002 fef5 	bl	8003848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000cc 	.word	0x200000cc

08000a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b096      	sub	sp, #88	@ 0x58
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 faf3 	bl	8004098 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab2:	4b50      	ldr	r3, [pc, #320]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ab4:	4a50      	ldr	r2, [pc, #320]	@ (8000bf8 <MX_TIM1_Init+0x184>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ac6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b49      	ldr	r3, [pc, #292]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad2:	4b48      	ldr	r3, [pc, #288]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad8:	4b46      	ldr	r3, [pc, #280]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ade:	4845      	ldr	r0, [pc, #276]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ae0:	f001 fe52 	bl	8002788 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aea:	f7ff ff45 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000af8:	4619      	mov	r1, r3
 8000afa:	483e      	ldr	r0, [pc, #248]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000afc:	f002 f864 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b06:	f7ff ff37 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b0a:	483a      	ldr	r0, [pc, #232]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000b0c:	f001 fe8b 	bl	8002826 <HAL_TIM_PWM_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b16:	f7ff ff2f 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b26:	4619      	mov	r1, r3
 8000b28:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000b2a:	f002 fc9d 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b34:	f7ff ff20 	bl	8000978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	@ 0x60
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4825      	ldr	r0, [pc, #148]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000b5e:	f001 ff75 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b68:	f7ff ff06 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000b76:	f001 ff69 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b80:	f7ff fefa 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	2208      	movs	r2, #8
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4819      	ldr	r0, [pc, #100]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000b8e:	f001 ff5d 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b98:	f7ff feee 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000ba6:	f001 ff51 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bb0:	f7ff fee2 	bl	8000978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000bd8:	f002 fcb2 	bl	8003540 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000be2:	f7ff fec9 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000be6:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <MX_TIM1_Init+0x180>)
 8000be8:	f000 f8fe 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3758      	adds	r7, #88	@ 0x58
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000003c 	.word	0x2000003c
 8000bf8:	40012c00 	.word	0x40012c00

08000bfc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b096      	sub	sp, #88	@ 0x58
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2220      	movs	r2, #32
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fa2f 	bl	8004098 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c3c:	4a50      	ldr	r2, [pc, #320]	@ (8000d80 <MX_TIM8_Init+0x184>)
 8000c3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c40:	4b4e      	ldr	r3, [pc, #312]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b4d      	ldr	r3, [pc, #308]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c4e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000c52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c5a:	4b48      	ldr	r3, [pc, #288]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c60:	4b46      	ldr	r3, [pc, #280]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c66:	4845      	ldr	r0, [pc, #276]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c68:	f001 fd8e 	bl	8002788 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000c72:	f7ff fe81 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c80:	4619      	mov	r1, r3
 8000c82:	483e      	ldr	r0, [pc, #248]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c84:	f001 ffa0 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000c8e:	f7ff fe73 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c92:	483a      	ldr	r0, [pc, #232]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000c94:	f001 fdc7 	bl	8002826 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000c9e:	f7ff fe6b 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4832      	ldr	r0, [pc, #200]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000cb2:	f002 fbd9 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000cbc:	f7ff fe5c 	bl	8000978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	@ 0x60
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4825      	ldr	r0, [pc, #148]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000ce6:	f001 feb1 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000cf0:	f7ff fe42 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481f      	ldr	r0, [pc, #124]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000cfe:	f001 fea5 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000d08:	f7ff fe36 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	2208      	movs	r2, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4819      	ldr	r0, [pc, #100]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000d16:	f001 fe99 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000d20:	f7ff fe2a 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	220c      	movs	r2, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000d2e:	f001 fe8d 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000d38:	f7ff fe1e 	bl	8000978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000d60:	f002 fbee 	bl	8003540 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000d6a:	f7ff fe05 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d6e:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <MX_TIM8_Init+0x180>)
 8000d70:	f000 f83a 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000d74:	bf00      	nop
 8000d76:	3758      	adds	r7, #88	@ 0x58
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000084 	.word	0x20000084
 8000d80:	40013400 	.word	0x40013400

08000d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <HAL_TIM_Base_MspInit+0x58>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10c      	bne.n	8000db0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000dae:	e010      	b.n	8000dd2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM8)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_TIM_Base_MspInit+0x60>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40013400 	.word	0x40013400

08000de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <HAL_TIM_MspPostInit+0xec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d143      	bne.n	8000e90 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a32      	ldr	r2, [pc, #200]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4824      	ldr	r0, [pc, #144]	@ (8000edc <HAL_TIM_MspPostInit+0xf4>)
 8000e4c:	f000 fea6 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000e50:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	481e      	ldr	r0, [pc, #120]	@ (8000ee0 <HAL_TIM_MspPostInit+0xf8>)
 8000e66:	f000 fe99 	bl	8001b9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <HAL_TIM_MspPostInit+0xfc>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e88:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <HAL_TIM_MspPostInit+0xfc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e8e:	e01d      	b.n	8000ecc <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <HAL_TIM_MspPostInit+0x100>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d118      	bne.n	8000ecc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000eb2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <HAL_TIM_MspPostInit+0x104>)
 8000ec8:	f000 fe68 	bl	8001b9c <HAL_GPIO_Init>
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40013400 	.word	0x40013400
 8000eec:	40011000 	.word	0x40011000

08000ef0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <MX_USART1_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f28:	f002 fb7f 	bl	800362a <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f7ff fd21 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000cc 	.word	0x200000cc
 8000f40:	40013800 	.word	0x40013800

08000f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a33      	ldr	r2, [pc, #204]	@ (800102c <HAL_UART_MspInit+0xe8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d15f      	bne.n	8001024 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f64:	4b32      	ldr	r3, [pc, #200]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a31      	ldr	r2, [pc, #196]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a2b      	ldr	r2, [pc, #172]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <HAL_UART_MspInit+0xec>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4822      	ldr	r0, [pc, #136]	@ (8001034 <HAL_UART_MspInit+0xf0>)
 8000faa:	f000 fdf7 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481c      	ldr	r0, [pc, #112]	@ (8001034 <HAL_UART_MspInit+0xf0>)
 8000fc4:	f000 fdea 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	@ (800103c <HAL_UART_MspInit+0xf8>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fdc:	2280      	movs	r2, #128	@ 0x80
 8000fde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ff8:	480f      	ldr	r0, [pc, #60]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8000ffa:	f000 f9db 	bl	80013b4 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001004:	f7ff fcb8 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_UART_MspInit+0xf4>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2025      	movs	r0, #37	@ 0x25
 800101a:	f000 f994 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800101e:	2025      	movs	r0, #37	@ 0x25
 8001020:	f000 f9ad 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40013800 	.word	0x40013800
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	20000110 	.word	0x20000110
 800103c:	40020044 	.word	0x40020044

08001040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	@ (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	@ (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001066:	f7ff fcff 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 f81d 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff fc29 	bl	80008c4 <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800107c:	08004138 	.word	0x08004138
  ldr r2, =_sbss
 8001080:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001084:	20000158 	.word	0x20000158

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <HAL_Init+0x28>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f947 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fc6c 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f95f 	bl	800139a <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 f927 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000004 	.word	0x20000004
 8001110:	2000000c 	.word	0x2000000c
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <HAL_IncTick+0x20>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	2000000c 	.word	0x2000000c
 8001138:	20000154 	.word	0x20000154

0800113c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	@ (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000154 	.word	0x20000154

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff0 	bl	800113c <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffe0 	bl	800113c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4906      	ldr	r1, [pc, #24]	@ (8001230 <__NVIC_EnableIRQ+0x34>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff90 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff2d 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff42 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff35 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e059      	b.n	800147e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_DMA_Init+0xd4>)
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d80f      	bhi.n	80013f6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_DMA_Init+0xd8>)
 80013de:	4413      	add	r3, r2
 80013e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <HAL_DMA_Init+0xdc>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	009a      	lsls	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_DMA_Init+0xe0>)
 80013f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013f4:	e00e      	b.n	8001414 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_DMA_Init+0xe4>)
 80013fe:	4413      	add	r3, r2
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_DMA_Init+0xdc>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	009a      	lsls	r2, r3, #2
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <HAL_DMA_Init+0xe8>)
 8001412:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800142a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800142e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40020407 	.word	0x40020407
 800148c:	bffdfff8 	.word	0xbffdfff8
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	40020000 	.word	0x40020000
 8001498:	bffdfbf8 	.word	0xbffdfbf8
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e020      	b.n	800150a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001526:	2b02      	cmp	r3, #2
 8001528:	d005      	beq.n	8001536 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2204      	movs	r2, #4
 800152e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e0d6      	b.n	80016e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 020e 	bic.w	r2, r2, #14
 8001544:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b64      	ldr	r3, [pc, #400]	@ (80016f0 <HAL_DMA_Abort_IT+0x1dc>)
 800155e:	429a      	cmp	r2, r3
 8001560:	d958      	bls.n	8001614 <HAL_DMA_Abort_IT+0x100>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a63      	ldr	r2, [pc, #396]	@ (80016f4 <HAL_DMA_Abort_IT+0x1e0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04f      	beq.n	800160c <HAL_DMA_Abort_IT+0xf8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a61      	ldr	r2, [pc, #388]	@ (80016f8 <HAL_DMA_Abort_IT+0x1e4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d048      	beq.n	8001608 <HAL_DMA_Abort_IT+0xf4>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a60      	ldr	r2, [pc, #384]	@ (80016fc <HAL_DMA_Abort_IT+0x1e8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d040      	beq.n	8001602 <HAL_DMA_Abort_IT+0xee>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a5e      	ldr	r2, [pc, #376]	@ (8001700 <HAL_DMA_Abort_IT+0x1ec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d038      	beq.n	80015fc <HAL_DMA_Abort_IT+0xe8>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5d      	ldr	r2, [pc, #372]	@ (8001704 <HAL_DMA_Abort_IT+0x1f0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d030      	beq.n	80015f6 <HAL_DMA_Abort_IT+0xe2>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a5b      	ldr	r2, [pc, #364]	@ (8001708 <HAL_DMA_Abort_IT+0x1f4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d028      	beq.n	80015f0 <HAL_DMA_Abort_IT+0xdc>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a53      	ldr	r2, [pc, #332]	@ (80016f0 <HAL_DMA_Abort_IT+0x1dc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d020      	beq.n	80015ea <HAL_DMA_Abort_IT+0xd6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a57      	ldr	r2, [pc, #348]	@ (800170c <HAL_DMA_Abort_IT+0x1f8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_DMA_Abort_IT+0xd2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a56      	ldr	r2, [pc, #344]	@ (8001710 <HAL_DMA_Abort_IT+0x1fc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d012      	beq.n	80015e2 <HAL_DMA_Abort_IT+0xce>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a54      	ldr	r2, [pc, #336]	@ (8001714 <HAL_DMA_Abort_IT+0x200>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00a      	beq.n	80015dc <HAL_DMA_Abort_IT+0xc8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a53      	ldr	r2, [pc, #332]	@ (8001718 <HAL_DMA_Abort_IT+0x204>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <HAL_DMA_Abort_IT+0xc2>
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	e01b      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015da:	e018      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e0:	e015      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015e2:	2310      	movs	r3, #16
 80015e4:	e013      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e011      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ee:	e00e      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015f4:	e00b      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015fa:	e008      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 80015fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001600:	e005      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 8001602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001606:	e002      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 8001608:	2310      	movs	r3, #16
 800160a:	e000      	b.n	800160e <HAL_DMA_Abort_IT+0xfa>
 800160c:	2301      	movs	r3, #1
 800160e:	4a43      	ldr	r2, [pc, #268]	@ (800171c <HAL_DMA_Abort_IT+0x208>)
 8001610:	6053      	str	r3, [r2, #4]
 8001612:	e057      	b.n	80016c4 <HAL_DMA_Abort_IT+0x1b0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a36      	ldr	r2, [pc, #216]	@ (80016f4 <HAL_DMA_Abort_IT+0x1e0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d04f      	beq.n	80016be <HAL_DMA_Abort_IT+0x1aa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a35      	ldr	r2, [pc, #212]	@ (80016f8 <HAL_DMA_Abort_IT+0x1e4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d048      	beq.n	80016ba <HAL_DMA_Abort_IT+0x1a6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a33      	ldr	r2, [pc, #204]	@ (80016fc <HAL_DMA_Abort_IT+0x1e8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d040      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x1a0>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_DMA_Abort_IT+0x1ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d038      	beq.n	80016ae <HAL_DMA_Abort_IT+0x19a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_DMA_Abort_IT+0x1f0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d030      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x194>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <HAL_DMA_Abort_IT+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d028      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x18e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_DMA_Abort_IT+0x1dc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d020      	beq.n	800169c <HAL_DMA_Abort_IT+0x188>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a2b      	ldr	r2, [pc, #172]	@ (800170c <HAL_DMA_Abort_IT+0x1f8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d019      	beq.n	8001698 <HAL_DMA_Abort_IT+0x184>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a29      	ldr	r2, [pc, #164]	@ (8001710 <HAL_DMA_Abort_IT+0x1fc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d012      	beq.n	8001694 <HAL_DMA_Abort_IT+0x180>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <HAL_DMA_Abort_IT+0x200>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00a      	beq.n	800168e <HAL_DMA_Abort_IT+0x17a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a26      	ldr	r2, [pc, #152]	@ (8001718 <HAL_DMA_Abort_IT+0x204>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d102      	bne.n	8001688 <HAL_DMA_Abort_IT+0x174>
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	e01b      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 8001688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168c:	e018      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 800168e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001692:	e015      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 8001694:	2310      	movs	r3, #16
 8001696:	e013      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 8001698:	2301      	movs	r3, #1
 800169a:	e011      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 800169c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016a0:	e00e      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016a6:	e00b      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ac:	e008      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b8:	e002      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016ba:	2310      	movs	r3, #16
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_Abort_IT+0x1ac>
 80016be:	2301      	movs	r3, #1
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_DMA_Abort_IT+0x20c>)
 80016c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
    } 
  }
  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020080 	.word	0x40020080
 80016f4:	40020008 	.word	0x40020008
 80016f8:	4002001c 	.word	0x4002001c
 80016fc:	40020030 	.word	0x40020030
 8001700:	40020044 	.word	0x40020044
 8001704:	40020058 	.word	0x40020058
 8001708:	4002006c 	.word	0x4002006c
 800170c:	40020408 	.word	0x40020408
 8001710:	4002041c 	.word	0x4002041c
 8001714:	40020430 	.word	0x40020430
 8001718:	40020444 	.word	0x40020444
 800171c:	40020400 	.word	0x40020400
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	2204      	movs	r2, #4
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80f1 	beq.w	8001930 <HAL_DMA_IRQHandler+0x20c>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80eb 	beq.w	8001930 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b5f      	ldr	r3, [pc, #380]	@ (80018fc <HAL_DMA_IRQHandler+0x1d8>)
 8001780:	429a      	cmp	r2, r3
 8001782:	d958      	bls.n	8001836 <HAL_DMA_IRQHandler+0x112>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <HAL_DMA_IRQHandler+0x1dc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d04f      	beq.n	800182e <HAL_DMA_IRQHandler+0x10a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a5c      	ldr	r2, [pc, #368]	@ (8001904 <HAL_DMA_IRQHandler+0x1e0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d048      	beq.n	800182a <HAL_DMA_IRQHandler+0x106>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5a      	ldr	r2, [pc, #360]	@ (8001908 <HAL_DMA_IRQHandler+0x1e4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d040      	beq.n	8001824 <HAL_DMA_IRQHandler+0x100>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a59      	ldr	r2, [pc, #356]	@ (800190c <HAL_DMA_IRQHandler+0x1e8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d038      	beq.n	800181e <HAL_DMA_IRQHandler+0xfa>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a57      	ldr	r2, [pc, #348]	@ (8001910 <HAL_DMA_IRQHandler+0x1ec>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d030      	beq.n	8001818 <HAL_DMA_IRQHandler+0xf4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a56      	ldr	r2, [pc, #344]	@ (8001914 <HAL_DMA_IRQHandler+0x1f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d028      	beq.n	8001812 <HAL_DMA_IRQHandler+0xee>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4d      	ldr	r2, [pc, #308]	@ (80018fc <HAL_DMA_IRQHandler+0x1d8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d020      	beq.n	800180c <HAL_DMA_IRQHandler+0xe8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <HAL_DMA_IRQHandler+0x1f4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d019      	beq.n	8001808 <HAL_DMA_IRQHandler+0xe4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a50      	ldr	r2, [pc, #320]	@ (800191c <HAL_DMA_IRQHandler+0x1f8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d012      	beq.n	8001804 <HAL_DMA_IRQHandler+0xe0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001920 <HAL_DMA_IRQHandler+0x1fc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00a      	beq.n	80017fe <HAL_DMA_IRQHandler+0xda>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001924 <HAL_DMA_IRQHandler+0x200>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d102      	bne.n	80017f8 <HAL_DMA_IRQHandler+0xd4>
 80017f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017f6:	e01b      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 80017f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017fc:	e018      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 80017fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001802:	e015      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 8001804:	2340      	movs	r3, #64	@ 0x40
 8001806:	e013      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 8001808:	2304      	movs	r3, #4
 800180a:	e011      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 800180c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001810:	e00e      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 8001812:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001816:	e00b      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 8001818:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800181c:	e008      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 800181e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001822:	e005      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 8001824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001828:	e002      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 800182a:	2340      	movs	r3, #64	@ 0x40
 800182c:	e000      	b.n	8001830 <HAL_DMA_IRQHandler+0x10c>
 800182e:	2304      	movs	r3, #4
 8001830:	4a3d      	ldr	r2, [pc, #244]	@ (8001928 <HAL_DMA_IRQHandler+0x204>)
 8001832:	6053      	str	r3, [r2, #4]
 8001834:	e057      	b.n	80018e6 <HAL_DMA_IRQHandler+0x1c2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a31      	ldr	r2, [pc, #196]	@ (8001900 <HAL_DMA_IRQHandler+0x1dc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04f      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x1bc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <HAL_DMA_IRQHandler+0x1e0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d048      	beq.n	80018dc <HAL_DMA_IRQHandler+0x1b8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <HAL_DMA_IRQHandler+0x1e4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d040      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x1b2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2c      	ldr	r2, [pc, #176]	@ (800190c <HAL_DMA_IRQHandler+0x1e8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d038      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x1ac>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2b      	ldr	r2, [pc, #172]	@ (8001910 <HAL_DMA_IRQHandler+0x1ec>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d030      	beq.n	80018ca <HAL_DMA_IRQHandler+0x1a6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a29      	ldr	r2, [pc, #164]	@ (8001914 <HAL_DMA_IRQHandler+0x1f0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d028      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x1a0>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <HAL_DMA_IRQHandler+0x1d8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d020      	beq.n	80018be <HAL_DMA_IRQHandler+0x19a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a25      	ldr	r2, [pc, #148]	@ (8001918 <HAL_DMA_IRQHandler+0x1f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_DMA_IRQHandler+0x196>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a24      	ldr	r2, [pc, #144]	@ (800191c <HAL_DMA_IRQHandler+0x1f8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d012      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x192>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <HAL_DMA_IRQHandler+0x1fc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x18c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <HAL_DMA_IRQHandler+0x200>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d102      	bne.n	80018aa <HAL_DMA_IRQHandler+0x186>
 80018a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018a8:	e01b      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018aa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018ae:	e018      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018b4:	e015      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018b6:	2340      	movs	r3, #64	@ 0x40
 80018b8:	e013      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e011      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018c2:	e00e      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018c8:	e00b      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018ce:	e008      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018d4:	e005      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018da:	e002      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018dc:	2340      	movs	r3, #64	@ 0x40
 80018de:	e000      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1be>
 80018e0:	2304      	movs	r3, #4
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <HAL_DMA_IRQHandler+0x208>)
 80018e4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8136 	beq.w	8001b5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018f8:	e130      	b.n	8001b5c <HAL_DMA_IRQHandler+0x438>
 80018fa:	bf00      	nop
 80018fc:	40020080 	.word	0x40020080
 8001900:	40020008 	.word	0x40020008
 8001904:	4002001c 	.word	0x4002001c
 8001908:	40020030 	.word	0x40020030
 800190c:	40020044 	.word	0x40020044
 8001910:	40020058 	.word	0x40020058
 8001914:	4002006c 	.word	0x4002006c
 8001918:	40020408 	.word	0x40020408
 800191c:	4002041c 	.word	0x4002041c
 8001920:	40020430 	.word	0x40020430
 8001924:	40020444 	.word	0x40020444
 8001928:	40020400 	.word	0x40020400
 800192c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	2202      	movs	r2, #2
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80dd 	beq.w	8001afc <HAL_DMA_IRQHandler+0x3d8>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80d7 	beq.w	8001afc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 020a 	bic.w	r2, r2, #10
 800196a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b68 <HAL_DMA_IRQHandler+0x444>)
 800197c:	429a      	cmp	r2, r3
 800197e:	d958      	bls.n	8001a32 <HAL_DMA_IRQHandler+0x30e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_DMA_IRQHandler+0x448>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d04f      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x306>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a78      	ldr	r2, [pc, #480]	@ (8001b70 <HAL_DMA_IRQHandler+0x44c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d048      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x302>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a76      	ldr	r2, [pc, #472]	@ (8001b74 <HAL_DMA_IRQHandler+0x450>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d040      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2fc>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a75      	ldr	r2, [pc, #468]	@ (8001b78 <HAL_DMA_IRQHandler+0x454>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d038      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x2f6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a73      	ldr	r2, [pc, #460]	@ (8001b7c <HAL_DMA_IRQHandler+0x458>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d030      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2f0>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a72      	ldr	r2, [pc, #456]	@ (8001b80 <HAL_DMA_IRQHandler+0x45c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d028      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x2ea>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a69      	ldr	r2, [pc, #420]	@ (8001b68 <HAL_DMA_IRQHandler+0x444>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d020      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x2e4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001b84 <HAL_DMA_IRQHandler+0x460>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d019      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2e0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6c      	ldr	r2, [pc, #432]	@ (8001b88 <HAL_DMA_IRQHandler+0x464>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d012      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x2dc>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6b      	ldr	r2, [pc, #428]	@ (8001b8c <HAL_DMA_IRQHandler+0x468>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00a      	beq.n	80019fa <HAL_DMA_IRQHandler+0x2d6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a69      	ldr	r2, [pc, #420]	@ (8001b90 <HAL_DMA_IRQHandler+0x46c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d102      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x2d0>
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	e01b      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 80019f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f8:	e018      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 80019fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019fe:	e015      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a00:	2320      	movs	r3, #32
 8001a02:	e013      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e011      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a0c:	e00e      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a12:	e00b      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a18:	e008      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1e:	e005      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a24:	e002      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a26:	2320      	movs	r3, #32
 8001a28:	e000      	b.n	8001a2c <HAL_DMA_IRQHandler+0x308>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	4a59      	ldr	r2, [pc, #356]	@ (8001b94 <HAL_DMA_IRQHandler+0x470>)
 8001a2e:	6053      	str	r3, [r2, #4]
 8001a30:	e057      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x3be>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a4d      	ldr	r2, [pc, #308]	@ (8001b6c <HAL_DMA_IRQHandler+0x448>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d04f      	beq.n	8001adc <HAL_DMA_IRQHandler+0x3b8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4b      	ldr	r2, [pc, #300]	@ (8001b70 <HAL_DMA_IRQHandler+0x44c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d048      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x3b4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <HAL_DMA_IRQHandler+0x450>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d040      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x3ae>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_DMA_IRQHandler+0x454>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d038      	beq.n	8001acc <HAL_DMA_IRQHandler+0x3a8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a47      	ldr	r2, [pc, #284]	@ (8001b7c <HAL_DMA_IRQHandler+0x458>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d030      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x3a2>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <HAL_DMA_IRQHandler+0x45c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d028      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x39c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_DMA_IRQHandler+0x444>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d020      	beq.n	8001aba <HAL_DMA_IRQHandler+0x396>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a41      	ldr	r2, [pc, #260]	@ (8001b84 <HAL_DMA_IRQHandler+0x460>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x392>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a40      	ldr	r2, [pc, #256]	@ (8001b88 <HAL_DMA_IRQHandler+0x464>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d012      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x38e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3e      	ldr	r2, [pc, #248]	@ (8001b8c <HAL_DMA_IRQHandler+0x468>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00a      	beq.n	8001aac <HAL_DMA_IRQHandler+0x388>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b90 <HAL_DMA_IRQHandler+0x46c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d102      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x382>
 8001aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa4:	e01b      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aaa:	e018      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab0:	e015      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e013      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e011      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001abe:	e00e      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ac0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ac4:	e00b      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aca:	e008      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad0:	e005      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad6:	e002      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001ad8:	2320      	movs	r3, #32
 8001ada:	e000      	b.n	8001ade <HAL_DMA_IRQHandler+0x3ba>
 8001adc:	2302      	movs	r3, #2
 8001ade:	4a2e      	ldr	r2, [pc, #184]	@ (8001b98 <HAL_DMA_IRQHandler+0x474>)
 8001ae0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d034      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001afa:	e02f      	b.n	8001b5c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2208      	movs	r2, #8
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d028      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x43a>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d023      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 020e 	bic.w	r2, r2, #14
 8001b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4798      	blx	r3
    }
  }
  return;
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
}
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40020080 	.word	0x40020080
 8001b6c:	40020008 	.word	0x40020008
 8001b70:	4002001c 	.word	0x4002001c
 8001b74:	40020030 	.word	0x40020030
 8001b78:	40020044 	.word	0x40020044
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	4002006c 	.word	0x4002006c
 8001b84:	40020408 	.word	0x40020408
 8001b88:	4002041c 	.word	0x4002041c
 8001b8c:	40020430 	.word	0x40020430
 8001b90:	40020444 	.word	0x40020444
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e179      	b.n	8001ea4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8168 	bne.w	8001e9e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a96      	ldr	r2, [pc, #600]	@ (8001e2c <HAL_GPIO_Init+0x290>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d05e      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a94      	ldr	r2, [pc, #592]	@ (8001e2c <HAL_GPIO_Init+0x290>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d875      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bde:	4a94      	ldr	r2, [pc, #592]	@ (8001e30 <HAL_GPIO_Init+0x294>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d058      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001be4:	4a92      	ldr	r2, [pc, #584]	@ (8001e30 <HAL_GPIO_Init+0x294>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d86f      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bea:	4a92      	ldr	r2, [pc, #584]	@ (8001e34 <HAL_GPIO_Init+0x298>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d052      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a90      	ldr	r2, [pc, #576]	@ (8001e34 <HAL_GPIO_Init+0x298>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d869      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bf6:	4a90      	ldr	r2, [pc, #576]	@ (8001e38 <HAL_GPIO_Init+0x29c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d04c      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8001e38 <HAL_GPIO_Init+0x29c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d863      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c02:	4a8e      	ldr	r2, [pc, #568]	@ (8001e3c <HAL_GPIO_Init+0x2a0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d046      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001c08:	4a8c      	ldr	r2, [pc, #560]	@ (8001e3c <HAL_GPIO_Init+0x2a0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d85d      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d82a      	bhi.n	8001c68 <HAL_GPIO_Init+0xcc>
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d859      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <HAL_GPIO_Init+0x80>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c83 	.word	0x08001c83
 8001c28:	08001cc5 	.word	0x08001cc5
 8001c2c:	08001ccb 	.word	0x08001ccb
 8001c30:	08001ccb 	.word	0x08001ccb
 8001c34:	08001ccb 	.word	0x08001ccb
 8001c38:	08001ccb 	.word	0x08001ccb
 8001c3c:	08001ccb 	.word	0x08001ccb
 8001c40:	08001ccb 	.word	0x08001ccb
 8001c44:	08001ccb 	.word	0x08001ccb
 8001c48:	08001ccb 	.word	0x08001ccb
 8001c4c:	08001ccb 	.word	0x08001ccb
 8001c50:	08001ccb 	.word	0x08001ccb
 8001c54:	08001ccb 	.word	0x08001ccb
 8001c58:	08001ccb 	.word	0x08001ccb
 8001c5c:	08001ccb 	.word	0x08001ccb
 8001c60:	08001c79 	.word	0x08001c79
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	4a75      	ldr	r2, [pc, #468]	@ (8001e40 <HAL_GPIO_Init+0x2a4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6e:	e02c      	b.n	8001cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e029      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e024      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	3308      	adds	r3, #8
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e01f      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	330c      	adds	r3, #12
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e01a      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e013      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	611a      	str	r2, [r3, #16]
          break;
 8001cb6:	e009      	b.n	8001ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	615a      	str	r2, [r3, #20]
          break;
 8001cc2:	e003      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          break;
 8001cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2bff      	cmp	r3, #255	@ 0xff
 8001cd0:	d801      	bhi.n	8001cd6 <HAL_GPIO_Init+0x13a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_Init+0x13e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	@ 0xff
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_GPIO_Init+0x14c>
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x152>
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	3b08      	subs	r3, #8
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	6a39      	ldr	r1, [r7, #32]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80c1 	beq.w	8001e9e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1c:	4b49      	ldr	r3, [pc, #292]	@ (8001e44 <HAL_GPIO_Init+0x2a8>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a48      	ldr	r2, [pc, #288]	@ (8001e44 <HAL_GPIO_Init+0x2a8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <HAL_GPIO_Init+0x2a8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d34:	4a44      	ldr	r2, [pc, #272]	@ (8001e48 <HAL_GPIO_Init+0x2ac>)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e4c <HAL_GPIO_Init+0x2b0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01f      	beq.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3b      	ldr	r2, [pc, #236]	@ (8001e50 <HAL_GPIO_Init+0x2b4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d019      	beq.n	8001d9c <HAL_GPIO_Init+0x200>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1fc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a39      	ldr	r2, [pc, #228]	@ (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1f8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a38      	ldr	r2, [pc, #224]	@ (8001e5c <HAL_GPIO_Init+0x2c0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1f4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a37      	ldr	r2, [pc, #220]	@ (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1f0>
 8001d88:	2305      	movs	r3, #5
 8001d8a:	e00a      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	e008      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001da0:	2300      	movs	r3, #0
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db2:	4925      	ldr	r1, [pc, #148]	@ (8001e48 <HAL_GPIO_Init+0x2ac>)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4920      	ldr	r1, [pc, #128]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	491a      	ldr	r1, [pc, #104]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4916      	ldr	r1, [pc, #88]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d025      	beq.n	8001e68 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4910      	ldr	r1, [pc, #64]	@ (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
 8001e28:	e025      	b.n	8001e76 <HAL_GPIO_Init+0x2da>
 8001e2a:	bf00      	nop
 8001e2c:	10320000 	.word	0x10320000
 8001e30:	10310000 	.word	0x10310000
 8001e34:	10220000 	.word	0x10220000
 8001e38:	10210000 	.word	0x10210000
 8001e3c:	10120000 	.word	0x10120000
 8001e40:	10110000 	.word	0x10110000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40010800 	.word	0x40010800
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40011400 	.word	0x40011400
 8001e5c:	40011800 	.word	0x40011800
 8001e60:	40011c00 	.word	0x40011c00
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4913      	ldr	r1, [pc, #76]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	490e      	ldr	r1, [pc, #56]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60cb      	str	r3, [r1, #12]
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4909      	ldr	r1, [pc, #36]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f47f ae7e 	bne.w	8001bb0 <HAL_GPIO_Init+0x14>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	372c      	adds	r7, #44	@ 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f02:	787b      	ldrb	r3, [r7, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f34:	887a      	ldrh	r2, [r7, #2]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	400b      	ands	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e272      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8087 	beq.w	8002082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f74:	4b92      	ldr	r3, [pc, #584]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d00c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f80:	4b8f      	ldr	r3, [pc, #572]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d112      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5e>
 8001f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b89      	ldr	r3, [pc, #548]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06c      	beq.n	8002080 <HAL_RCC_OscConfig+0x12c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d168      	bne.n	8002080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e24c      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0x76>
 8001fbc:	4b80      	ldr	r3, [pc, #512]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e02e      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b78      	ldr	r3, [pc, #480]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a77      	ldr	r2, [pc, #476]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0xbc>
 8001ff6:	4b72      	ldr	r3, [pc, #456]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a71      	ldr	r2, [pc, #452]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6f      	ldr	r3, [pc, #444]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6e      	ldr	r2, [pc, #440]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xd4>
 8002010:	4b6b      	ldr	r3, [pc, #428]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6a      	ldr	r2, [pc, #424]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b68      	ldr	r3, [pc, #416]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a67      	ldr	r2, [pc, #412]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff f884 	bl	800113c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff f880 	bl	800113c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e200      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b5d      	ldr	r3, [pc, #372]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xe4>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f870 	bl	800113c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f86c 	bl	800113c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1ec      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x10c>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d063      	beq.n	8002156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208e:	4b4c      	ldr	r3, [pc, #304]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800209a:	4b49      	ldr	r3, [pc, #292]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x18c>
 80020a6:	4b46      	ldr	r3, [pc, #280]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x176>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1c0      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4939      	ldr	r1, [pc, #228]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <HAL_RCC_OscConfig+0x270>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff f825 	bl	800113c <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff f821 	bl	800113c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1a1      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b2d      	ldr	r3, [pc, #180]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4927      	ldr	r1, [pc, #156]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_RCC_OscConfig+0x270>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff f804 	bl	800113c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7ff f800 	bl	800113c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e180      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d03a      	beq.n	80021d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_RCC_OscConfig+0x274>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe ffe4 	bl	800113c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe ffe0 	bl	800113c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e160      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002196:	2001      	movs	r0, #1
 8002198:	f000 fad8 	bl	800274c <RCC_Delay>
 800219c:	e01c      	b.n	80021d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_RCC_OscConfig+0x274>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7fe ffca 	bl	800113c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021aa:	e00f      	b.n	80021cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe ffc6 	bl	800113c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d908      	bls.n	80021cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e146      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	42420000 	.word	0x42420000
 80021c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e9      	bne.n	80021ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a6 	beq.w	8002332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a87      	ldr	r2, [pc, #540]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b85      	ldr	r3, [pc, #532]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b82      	ldr	r3, [pc, #520]	@ (800241c <HAL_RCC_OscConfig+0x4c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b7f      	ldr	r3, [pc, #508]	@ (800241c <HAL_RCC_OscConfig+0x4c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7e      	ldr	r2, [pc, #504]	@ (800241c <HAL_RCC_OscConfig+0x4c8>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7fe ff87 	bl	800113c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7fe ff83 	bl	800113c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	@ 0x64
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e103      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b75      	ldr	r3, [pc, #468]	@ (800241c <HAL_RCC_OscConfig+0x4c8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x312>
 8002258:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	e02d      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x334>
 800226e:	4b6a      	ldr	r3, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a69      	ldr	r2, [pc, #420]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b67      	ldr	r3, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a66      	ldr	r2, [pc, #408]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
 8002286:	e01c      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x356>
 8002290:	4b61      	ldr	r3, [pc, #388]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a60      	ldr	r2, [pc, #384]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	4b5e      	ldr	r3, [pc, #376]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0x36e>
 80022aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b58      	ldr	r3, [pc, #352]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a57      	ldr	r2, [pc, #348]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7fe ff37 	bl	800113c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe ff33 	bl	800113c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0b1      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ee      	beq.n	80022d2 <HAL_RCC_OscConfig+0x37e>
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff21 	bl	800113c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe ff1d 	bl	800113c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e09b      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	4b40      	ldr	r3, [pc, #256]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b3c      	ldr	r3, [pc, #240]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d061      	beq.n	800240c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d146      	bne.n	80023de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fef1 	bl	800113c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe feed 	bl	800113c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e06d      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002384:	d108      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002386:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4921      	ldr	r1, [pc, #132]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a19      	ldr	r1, [r3, #32]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	430b      	orrs	r3, r1
 80023aa:	491b      	ldr	r1, [pc, #108]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe fec1 	bl	800113c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe febd 	bl	800113c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e03d      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x46a>
 80023dc:	e035      	b.n	800244a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_RCC_OscConfig+0x4cc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe feaa 	bl	800113c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fea6 	bl	800113c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e026      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x498>
 800240a:	e01e      	b.n	800244a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e019      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
 8002420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_OscConfig+0x500>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0d0      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4965      	ldr	r1, [pc, #404]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a58      	ldr	r2, [pc, #352]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a52      	ldr	r2, [pc, #328]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d040      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d115      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b41      	ldr	r3, [pc, #260]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e073      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b39      	ldr	r3, [pc, #228]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4936      	ldr	r1, [pc, #216]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7fe fdf8 	bl	800113c <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7fe fdf4 	bl	800113c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e053      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d210      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4922      	ldr	r1, [pc, #136]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d2:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <HAL_RCC_ClockConfig+0x1cc>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_ClockConfig+0x1d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fd56 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40022000 	.word	0x40022000
 800261c:	40021000 	.word	0x40021000
 8002620:	08004118 	.word	0x08004118
 8002624:	20000004 	.word	0x20000004
 8002628:	20000008 	.word	0x20000008

0800262c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b490      	push	{r4, r7}
 800262e:	b08a      	sub	sp, #40	@ 0x28
 8002630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002634:	1d3c      	adds	r4, r7, #4
 8002636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800263c:	f240 2301 	movw	r3, #513	@ 0x201
 8002640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x40>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x46>
 800266a:	e02b      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800266e:	623b      	str	r3, [r7, #32]
      break;
 8002670:	e02b      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3328      	adds	r3, #40	@ 0x28
 800267c:	443b      	add	r3, r7
 800267e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002682:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	3328      	adds	r3, #40	@ 0x28
 800269a:	443b      	add	r3, r7
 800269c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a6:	fb03 f202 	mul.w	r2, r3, r2
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b2:	e004      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	623b      	str	r3, [r7, #32]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	623b      	str	r3, [r7, #32]
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc90      	pop	{r4, r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	08004108 	.word	0x08004108
 80026dc:	40021000 	.word	0x40021000
 80026e0:	007a1200 	.word	0x007a1200
 80026e4:	003d0900 	.word	0x003d0900

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b02      	ldr	r3, [pc, #8]	@ (80026f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff2 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	@ (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	08004128 	.word	0x08004128

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffde 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0adb      	lsrs	r3, r3, #11
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	@ (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	08004128 	.word	0x08004128

0800274c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002754:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <RCC_Delay+0x34>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <RCC_Delay+0x38>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0a5b      	lsrs	r3, r3, #9
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002768:	bf00      	nop
  }
  while (Delay --);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f9      	bne.n	8002768 <RCC_Delay+0x1c>
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000004 	.word	0x20000004
 8002784:	10624dd3 	.word	0x10624dd3

08002788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e041      	b.n	800281e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fae8 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f000 fac2 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e041      	b.n	80028bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f839 	bl	80028c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f000 fa73 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_TIM_PWM_Start+0x24>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e022      	b.n	8002942 <HAL_TIM_PWM_Start+0x6a>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d109      	bne.n	8002916 <HAL_TIM_PWM_Start+0x3e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	e015      	b.n	8002942 <HAL_TIM_PWM_Start+0x6a>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d109      	bne.n	8002930 <HAL_TIM_PWM_Start+0x58>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e008      	b.n	8002942 <HAL_TIM_PWM_Start+0x6a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e072      	b.n	8002a30 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <HAL_TIM_PWM_Start+0x82>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002958:	e013      	b.n	8002982 <HAL_TIM_PWM_Start+0xaa>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d104      	bne.n	800296a <HAL_TIM_PWM_Start+0x92>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002968:	e00b      	b.n	8002982 <HAL_TIM_PWM_Start+0xaa>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d104      	bne.n	800297a <HAL_TIM_PWM_Start+0xa2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002978:	e003      	b.n	8002982 <HAL_TIM_PWM_Start+0xaa>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fc9c 	bl	80032c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <HAL_TIM_PWM_Start+0x160>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_TIM_PWM_Start+0xcc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <HAL_TIM_PWM_Start+0x164>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_TIM_PWM_Start+0xd0>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_TIM_PWM_Start+0xd2>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <HAL_TIM_PWM_Start+0x160>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d018      	beq.n	80029fa <HAL_TIM_PWM_Start+0x122>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <HAL_TIM_PWM_Start+0x164>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_TIM_PWM_Start+0x122>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d00e      	beq.n	80029fa <HAL_TIM_PWM_Start+0x122>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_TIM_PWM_Start+0x168>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_TIM_PWM_Start+0x122>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <HAL_TIM_PWM_Start+0x16c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_TIM_PWM_Start+0x122>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <HAL_TIM_PWM_Start+0x170>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d111      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d010      	beq.n	8002a2e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	e007      	b.n	8002a2e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40013400 	.word	0x40013400
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00

08002a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0ac      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	f200 809f 	bhi.w	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a76:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002bb5 	.word	0x08002bb5
 8002a84:	08002bb5 	.word	0x08002bb5
 8002a88:	08002bb5 	.word	0x08002bb5
 8002a8c:	08002af1 	.word	0x08002af1
 8002a90:	08002bb5 	.word	0x08002bb5
 8002a94:	08002bb5 	.word	0x08002bb5
 8002a98:	08002bb5 	.word	0x08002bb5
 8002a9c:	08002b33 	.word	0x08002b33
 8002aa0:	08002bb5 	.word	0x08002bb5
 8002aa4:	08002bb5 	.word	0x08002bb5
 8002aa8:	08002bb5 	.word	0x08002bb5
 8002aac:	08002b73 	.word	0x08002b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9c4 	bl	8002e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      break;
 8002aee:	e062      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa14 	bl	8002f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	619a      	str	r2, [r3, #24]
      break;
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fa67 	bl	800300c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0208 	orr.w	r2, r2, #8
 8002b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0204 	bic.w	r2, r2, #4
 8002b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	61da      	str	r2, [r3, #28]
      break;
 8002b70:	e021      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fabb 	bl	80030f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	61da      	str	r2, [r3, #28]
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0b3      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x180>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c18:	d03e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xd0>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1e:	f200 8087 	bhi.w	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c26:	f000 8085 	beq.w	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2e:	d87f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b70      	cmp	r3, #112	@ 0x70
 8002c32:	d01a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xa2>
 8002c34:	2b70      	cmp	r3, #112	@ 0x70
 8002c36:	d87b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b60      	cmp	r3, #96	@ 0x60
 8002c3a:	d050      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x116>
 8002c3c:	2b60      	cmp	r3, #96	@ 0x60
 8002c3e:	d877      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b50      	cmp	r3, #80	@ 0x50
 8002c42:	d03c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xf6>
 8002c44:	2b50      	cmp	r3, #80	@ 0x50
 8002c46:	d873      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d058      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x136>
 8002c4c:	2b40      	cmp	r3, #64	@ 0x40
 8002c4e:	d86f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b30      	cmp	r3, #48	@ 0x30
 8002c52:	d064      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c54:	2b30      	cmp	r3, #48	@ 0x30
 8002c56:	d86b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d060      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d867      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c68:	e062      	b.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f000 fb06 	bl	800328a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	609a      	str	r2, [r3, #8]
      break;
 8002c96:	e04e      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f000 faef 	bl	800328a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e03b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 fa66 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2150      	movs	r1, #80	@ 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fabd 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e02b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 fa84 	bl	80031f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2160      	movs	r1, #96	@ 0x60
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 faad 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e01b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 fa46 	bl	800319c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2140      	movs	r1, #64	@ 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa9d 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 fa94 	bl	8003256 <TIM_ITRx_SetConfig>
        break;
 8002d2e:	e002      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a33      	ldr	r2, [pc, #204]	@ (8002e30 <TIM_Base_SetConfig+0xe0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a32      	ldr	r2, [pc, #200]	@ (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00f      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <TIM_Base_SetConfig+0xe8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a2e      	ldr	r2, [pc, #184]	@ (8002e3c <TIM_Base_SetConfig+0xec>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d003      	beq.n	8002d90 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <TIM_Base_SetConfig+0xf0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d108      	bne.n	8002da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <TIM_Base_SetConfig+0xe0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <TIM_Base_SetConfig+0x82>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00f      	beq.n	8002dd2 <TIM_Base_SetConfig+0x82>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db8:	d00b      	beq.n	8002dd2 <TIM_Base_SetConfig+0x82>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <TIM_Base_SetConfig+0xe8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <TIM_Base_SetConfig+0xec>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0x82>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <TIM_Base_SetConfig+0xf0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <TIM_Base_SetConfig+0xe0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <TIM_Base_SetConfig+0xe4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40013400 	.word	0x40013400
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00

08002e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0201 	bic.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <TIM_OC1_SetConfig+0xd8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_OC1_SetConfig+0x64>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f20 <TIM_OC1_SetConfig+0xdc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10c      	bne.n	8002ec2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0308 	bic.w	r3, r3, #8
 8002eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <TIM_OC1_SetConfig+0xd8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_OC1_SetConfig+0x8e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <TIM_OC1_SetConfig+0xdc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d111      	bne.n	8002ef6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40013400 	.word	0x40013400

08002f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0210 	bic.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0320 	bic.w	r3, r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a21      	ldr	r2, [pc, #132]	@ (8003004 <TIM_OC2_SetConfig+0xe0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_OC2_SetConfig+0x68>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a20      	ldr	r2, [pc, #128]	@ (8003008 <TIM_OC2_SetConfig+0xe4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10d      	bne.n	8002fa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <TIM_OC2_SetConfig+0xe0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_OC2_SetConfig+0x94>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <TIM_OC2_SetConfig+0xe4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d113      	bne.n	8002fe0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40013400 	.word	0x40013400

0800300c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <TIM_OC3_SetConfig+0xe0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC3_SetConfig+0x66>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <TIM_OC3_SetConfig+0xe4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10d      	bne.n	800308e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800308c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <TIM_OC3_SetConfig+0xe0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_OC3_SetConfig+0x92>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a15      	ldr	r2, [pc, #84]	@ (80030f0 <TIM_OC3_SetConfig+0xe4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d113      	bne.n	80030c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40013400 	.word	0x40013400

080030f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800313e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	031b      	lsls	r3, r3, #12
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <TIM_OC4_SetConfig+0xa0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_OC4_SetConfig+0x68>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <TIM_OC4_SetConfig+0xa4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d109      	bne.n	8003170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	621a      	str	r2, [r3, #32]
}
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40013400 	.word	0x40013400

0800319c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 030a 	bic.w	r3, r3, #10
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 0210 	bic.w	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	031b      	lsls	r3, r3, #12
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0307 	orr.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328a:	b480      	push	{r7}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2201      	movs	r2, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_TIMEx_PWMN_Start+0x24>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e022      	b.n	800337a <HAL_TIMEx_PWMN_Start+0x6a>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d109      	bne.n	800334e <HAL_TIMEx_PWMN_Start+0x3e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e015      	b.n	800337a <HAL_TIMEx_PWMN_Start+0x6a>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d109      	bne.n	8003368 <HAL_TIMEx_PWMN_Start+0x58>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e008      	b.n	800337a <HAL_TIMEx_PWMN_Start+0x6a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e063      	b.n	800344a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <HAL_TIMEx_PWMN_Start+0x82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003390:	e013      	b.n	80033ba <HAL_TIMEx_PWMN_Start+0xaa>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d104      	bne.n	80033a2 <HAL_TIMEx_PWMN_Start+0x92>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033a0:	e00b      	b.n	80033ba <HAL_TIMEx_PWMN_Start+0xaa>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d104      	bne.n	80033b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b0:	e003      	b.n	80033ba <HAL_TIMEx_PWMN_Start+0xaa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f90d 	bl	80035e2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <HAL_TIMEx_PWMN_Start+0x144>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d018      	beq.n	8003414 <HAL_TIMEx_PWMN_Start+0x104>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003458 <HAL_TIMEx_PWMN_Start+0x148>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <HAL_TIMEx_PWMN_Start+0x104>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d00e      	beq.n	8003414 <HAL_TIMEx_PWMN_Start+0x104>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a18      	ldr	r2, [pc, #96]	@ (800345c <HAL_TIMEx_PWMN_Start+0x14c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_TIMEx_PWMN_Start+0x104>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <HAL_TIMEx_PWMN_Start+0x150>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d004      	beq.n	8003414 <HAL_TIMEx_PWMN_Start+0x104>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_TIMEx_PWMN_Start+0x154>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d111      	bne.n	8003438 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d010      	beq.n	8003448 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	e007      	b.n	8003448 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40013400 	.word	0x40013400
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e050      	b.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1b      	ldr	r2, [pc, #108]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a15      	ldr	r2, [pc, #84]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a12      	ldr	r2, [pc, #72]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4313      	orrs	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40013400 	.word	0x40013400
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00

08003540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e03d      	b.n	80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2204      	movs	r2, #4
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	43db      	mvns	r3, r3
 8003604:	401a      	ands	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e03f      	b.n	80036bc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd fc77 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2224      	movs	r2, #36	@ 0x24
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fc84 	bl	8003f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003682:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003692:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d17c      	bne.n	80037de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x2c>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e075      	b.n	80037e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x3e>
 80036fe:	2302      	movs	r3, #2
 8003700:	e06e      	b.n	80037e0 <HAL_UART_Transmit+0x11c>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	@ 0x21
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003718:	f7fd fd10 	bl	800113c <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d108      	bne.n	8003746 <HAL_UART_Transmit+0x82>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e003      	b.n	800374e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003756:	e02a      	b.n	80037ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	@ 0x80
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fa37 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e036      	b.n	80037e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003786:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	3302      	adds	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e007      	b.n	80037a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1cf      	bne.n	8003758 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	2140      	movs	r1, #64	@ 0x40
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa07 	bl	8003bd6 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e006      	b.n	80037e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d11d      	bne.n	800383e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_Receive_IT+0x26>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e016      	b.n	8003840 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_UART_Receive_IT+0x38>
 800381c:	2302      	movs	r3, #2
 800381e:	e00f      	b.n	8003840 <HAL_UART_Receive_IT+0x58>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	461a      	mov	r2, r3
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fa18 	bl	8003c6a <UART_Start_Receive_IT>
 800383a:	4603      	mov	r3, r0
 800383c:	e000      	b.n	8003840 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_UART_IRQHandler+0x52>
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fac9 	bl	8003e2a <UART_Receive_IT>
      return;
 8003898:	e17b      	b.n	8003b92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80b1 	beq.w	8003a04 <HAL_UART_IRQHandler+0x1bc>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_UART_IRQHandler+0x70>
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a6 	beq.w	8003a04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_UART_IRQHandler+0x90>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_UART_IRQHandler+0xb0>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f043 0202 	orr.w	r2, r3, #2
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_UART_IRQHandler+0xd0>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <HAL_UART_IRQHandler+0xfa>
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_UART_IRQHandler+0xee>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f043 0208 	orr.w	r2, r3, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 811e 	beq.w	8003b88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_UART_IRQHandler+0x11e>
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa62 	bl	8003e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <HAL_UART_IRQHandler+0x146>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d031      	beq.n	80039f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9a4 	bl	8003cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695a      	ldr	r2, [r3, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039be:	4a76      	ldr	r2, [pc, #472]	@ (8003b98 <HAL_UART_IRQHandler+0x350>)
 80039c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd fda4 	bl	8001514 <HAL_DMA_Abort_IT>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039dc:	4610      	mov	r0, r2
 80039de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e00e      	b.n	8003a00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8e3 	bl	8003bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e00a      	b.n	8003a00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8df 	bl	8003bae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e006      	b.n	8003a00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8db 	bl	8003bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80039fe:	e0c3      	b.n	8003b88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	bf00      	nop
    return;
 8003a02:	e0c1      	b.n	8003b88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 80a1 	bne.w	8003b50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 809b 	beq.w	8003b50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8095 	beq.w	8003b50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d04e      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a54:	8a3b      	ldrh	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8098 	beq.w	8003b8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a60:	8a3a      	ldrh	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	f080 8092 	bcs.w	8003b8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8a3a      	ldrh	r2, [r7, #16]
 8003a6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d02b      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0210 	bic.w	r2, r2, #16
 8003ac4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fce8 	bl	80014a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f86d 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ae6:	e051      	b.n	8003b8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d047      	beq.n	8003b90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b00:	8a7b      	ldrh	r3, [r7, #18]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003b14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0210 	bic.w	r2, r2, #16
 8003b42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b44:	8a7b      	ldrh	r3, [r7, #18]
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f839 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b4e:	e01f      	b.n	8003b90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_UART_IRQHandler+0x324>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8f9 	bl	8003d5c <UART_Transmit_IT>
    return;
 8003b6a:	e012      	b.n	8003b92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_UART_IRQHandler+0x34a>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f93a 	bl	8003dfa <UART_EndTransmit_IT>
    return;
 8003b86:	e004      	b.n	8003b92 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b88:	bf00      	nop
 8003b8a:	e002      	b.n	8003b92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b90:	bf00      	nop
  }
}
 8003b92:	3728      	adds	r7, #40	@ 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	08003d35 	.word	0x08003d35

08003b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	e02c      	b.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d028      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf6:	f7fd faa1 	bl	800113c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d21d      	bcs.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003c14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e00f      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	bf0c      	ite	eq
 8003c52:	2301      	moveq	r3, #1
 8003c54:	2300      	movne	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d0c3      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2222      	movs	r2, #34	@ 0x22
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003cf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0210 	bic.w	r2, r2, #16
 8003d1a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff2d 	bl	8003bae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b21      	cmp	r3, #33	@ 0x21
 8003d6e:	d13e      	bne.n	8003dee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	d114      	bne.n	8003da4 <UART_Transmit_IT+0x48>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d110      	bne.n	8003da4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]
 8003da2:	e008      	b.n	8003db6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6211      	str	r1, [r2, #32]
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003de8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff febe 	bl	8003b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b22      	cmp	r3, #34	@ 0x22
 8003e3c:	f040 8099 	bne.w	8003f72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e48:	d117      	bne.n	8003e7a <UART_Receive_IT+0x50>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d113      	bne.n	8003e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e72:	1c9a      	adds	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e78:	e026      	b.n	8003ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	d007      	beq.n	8003e9e <UART_Receive_IT+0x74>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <UART_Receive_IT+0x82>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e008      	b.n	8003ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d148      	bne.n	8003f6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0220 	bic.w	r2, r2, #32
 8003eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d123      	bne.n	8003f64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0210 	bic.w	r2, r2, #16
 8003f30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d10a      	bne.n	8003f56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fe2f 	bl	8003bc0 <HAL_UARTEx_RxEventCallback>
 8003f62:	e002      	b.n	8003f6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7fc fc13 	bl	8000790 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e002      	b.n	8003f74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003fb6:	f023 030c 	bic.w	r3, r3, #12
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2c      	ldr	r2, [pc, #176]	@ (8004090 <UART_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7fe fb9e 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	e002      	b.n	8003ff2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fec:	f7fe fb86 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003ff0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <UART_SetConfig+0x118>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	0119      	lsls	r1, r3, #4
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fbb2 f2f3 	udiv	r2, r2, r3
 8004028:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <UART_SetConfig+0x118>)
 800402a:	fba3 0302 	umull	r0, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2064      	movs	r0, #100	@ 0x64
 8004032:	fb00 f303 	mul.w	r3, r0, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	@ 0x32
 800403c:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <UART_SetConfig+0x118>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004048:	4419      	add	r1, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <UART_SetConfig+0x118>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2064      	movs	r0, #100	@ 0x64
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	@ 0x32
 8004074:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	440a      	add	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40013800 	.word	0x40013800
 8004094:	51eb851f 	.word	0x51eb851f

08004098 <memset>:
 8004098:	4603      	mov	r3, r0
 800409a:	4402      	add	r2, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	2600      	movs	r6, #0
 80040ac:	4d0c      	ldr	r5, [pc, #48]	@ (80040e0 <__libc_init_array+0x38>)
 80040ae:	4c0d      	ldr	r4, [pc, #52]	@ (80040e4 <__libc_init_array+0x3c>)
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	f000 f81a 	bl	80040f0 <_init>
 80040bc:	2600      	movs	r6, #0
 80040be:	4d0a      	ldr	r5, [pc, #40]	@ (80040e8 <__libc_init_array+0x40>)
 80040c0:	4c0a      	ldr	r4, [pc, #40]	@ (80040ec <__libc_init_array+0x44>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08004130 	.word	0x08004130
 80040e4:	08004130 	.word	0x08004130
 80040e8:	08004130 	.word	0x08004130
 80040ec:	08004134 	.word	0x08004134

080040f0 <_init>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr

080040fc <_fini>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr
