
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000429c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  080044a8  080044a8  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044a8  080044a8  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080044b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000018  080044c8  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080044c8  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1bc  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002655  00000000  00000000  000121fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00014858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3c  00000000  00000000  00015598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab20  00000000  00000000  00015fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f9a  00000000  00000000  00030af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098896  00000000  00000000  00041a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000da368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000dd850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	08004468 	.word	0x08004468

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	08004468 	.word	0x08004468

08000224 <Bsp_Init>:
}


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Beep_On_Time(50);
	PwmServo_Init();
 8000228:	f000 fa0c 	bl	8000644 <PwmServo_Init>
	Motor_Init();
 800022c:	f000 f88a 	bl	8000344 <Motor_Init>
	USART1_Init();
 8000230:	f000 fa92 	bl	8000758 <USART1_Init>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}

08000238 <Bsp_Loop>:


// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0

	HAL_UART_RxCpltCallback(&huart1);
 800023e:	482e      	ldr	r0, [pc, #184]	@ (80002f8 <Bsp_Loop+0xc0>)
 8000240:	f000 faaa 	bl	8000798 <HAL_UART_RxCpltCallback>

	while(1){
		int speed = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	607b      	str	r3, [r7, #4]

		if (RxTemp == '1')
 8000248:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <Bsp_Loop+0xc4>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b31      	cmp	r3, #49	@ 0x31
 800024e:	d120      	bne.n	8000292 <Bsp_Loop+0x5a>
		{
			speed = 2000;
 8000250:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000254:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	b21b      	sxth	r3, r3
 800025a:	4619      	mov	r1, r3
 800025c:	2000      	movs	r0, #0
 800025e:	f000 f8e5 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	b21b      	sxth	r3, r3
 8000266:	4619      	mov	r1, r3
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f8df 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	b21b      	sxth	r3, r3
 8000272:	4619      	mov	r1, r3
 8000274:	2002      	movs	r0, #2
 8000276:	f000 f8d9 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	b21b      	sxth	r3, r3
 800027e:	4619      	mov	r1, r3
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f8d3 	bl	800042c <Motor_Set_Pwm>
			PwmServo_Set_Angle_All(50, 50, 50, 50);
 8000286:	2332      	movs	r3, #50	@ 0x32
 8000288:	2232      	movs	r2, #50	@ 0x32
 800028a:	2132      	movs	r1, #50	@ 0x32
 800028c:	2032      	movs	r0, #50	@ 0x32
 800028e:	f000 fa01 	bl	8000694 <PwmServo_Set_Angle_All>
		}
		if (RxTemp == '2')
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <Bsp_Loop+0xc4>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b32      	cmp	r3, #50	@ 0x32
 8000298:	d102      	bne.n	80002a0 <Bsp_Loop+0x68>
		{
			// pause slowly
			Motor_Stop(0);
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f87a 	bl	8000394 <Motor_Stop>
		}
		if (RxTemp == '3')
 80002a0:	4b16      	ldr	r3, [pc, #88]	@ (80002fc <Bsp_Loop+0xc4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b33      	cmp	r3, #51	@ 0x33
 80002a6:	d11f      	bne.n	80002e8 <Bsp_Loop+0xb0>
		{
			speed = -2000;
 80002a8:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <Bsp_Loop+0xc8>)
 80002aa:	607b      	str	r3, [r7, #4]
			Motor_Set_Pwm(MOTOR_ID_M1, speed);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 f8ba 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M2, speed);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 f8b4 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M3, speed);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4619      	mov	r1, r3
 80002ca:	2002      	movs	r0, #2
 80002cc:	f000 f8ae 	bl	800042c <Motor_Set_Pwm>
			Motor_Set_Pwm(MOTOR_ID_M4, speed);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	4619      	mov	r1, r3
 80002d6:	2003      	movs	r0, #3
 80002d8:	f000 f8a8 	bl	800042c <Motor_Set_Pwm>
			PwmServo_Set_Angle_All(150, 150, 150, 150);
 80002dc:	2396      	movs	r3, #150	@ 0x96
 80002de:	2296      	movs	r2, #150	@ 0x96
 80002e0:	2196      	movs	r1, #150	@ 0x96
 80002e2:	2096      	movs	r0, #150	@ 0x96
 80002e4:	f000 f9d6 	bl	8000694 <PwmServo_Set_Angle_All>
		}
		if (RxTemp == '4')
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <Bsp_Loop+0xc4>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b34      	cmp	r3, #52	@ 0x34
 80002ee:	d1a9      	bne.n	8000244 <Bsp_Loop+0xc>
		{
			// immediately pause
			Motor_Stop(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 f84f 	bl	8000394 <Motor_Stop>
	while(1){
 80002f6:	e7a5      	b.n	8000244 <Bsp_Loop+0xc>
 80002f8:	20000110 	.word	0x20000110
 80002fc:	20000036 	.word	0x20000036
 8000300:	fffff830 	.word	0xfffff830

08000304 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 800030e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dd05      	ble.n	8000322 <Motor_Ignore_Dead_Zone+0x1e>
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800031c:	b29b      	uxth	r3, r3
 800031e:	b21b      	sxth	r3, r3
 8000320:	e00a      	b.n	8000338 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 8000322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000326:	2b00      	cmp	r3, #0
 8000328:	da05      	bge.n	8000336 <Motor_Ignore_Dead_Zone+0x32>
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8000330:	b29b      	uxth	r3, r3
 8000332:	b21b      	sxth	r3, r3
 8000334:	e000      	b.n	8000338 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 8000336:	2300      	movs	r3, #0
}
 8000338:	4618      	mov	r0, r3
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
	...

08000344 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000348:	2100      	movs	r1, #0
 800034a:	4810      	ldr	r0, [pc, #64]	@ (800038c <Motor_Init+0x48>)
 800034c:	f002 fb42 	bl	80029d4 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000350:	2104      	movs	r1, #4
 8000352:	480e      	ldr	r0, [pc, #56]	@ (800038c <Motor_Init+0x48>)
 8000354:	f003 f986 	bl	8003664 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000358:	2108      	movs	r1, #8
 800035a:	480c      	ldr	r0, [pc, #48]	@ (800038c <Motor_Init+0x48>)
 800035c:	f003 f982 	bl	8003664 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000360:	210c      	movs	r1, #12
 8000362:	480a      	ldr	r0, [pc, #40]	@ (800038c <Motor_Init+0x48>)
 8000364:	f002 fb36 	bl	80029d4 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000368:	2100      	movs	r1, #0
 800036a:	4809      	ldr	r0, [pc, #36]	@ (8000390 <Motor_Init+0x4c>)
 800036c:	f002 fb32 	bl	80029d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000370:	2104      	movs	r1, #4
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <Motor_Init+0x4c>)
 8000374:	f002 fb2e 	bl	80029d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000378:	2108      	movs	r1, #8
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <Motor_Init+0x4c>)
 800037c:	f002 fb2a 	bl	80029d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000380:	210c      	movs	r1, #12
 8000382:	4803      	ldr	r0, [pc, #12]	@ (8000390 <Motor_Init+0x4c>)
 8000384:	f002 fb26 	bl	80029d4 <HAL_TIM_PWM_Start>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000038 	.word	0x20000038
 8000390:	200000c8 	.word	0x200000c8

08000394 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <Motor_Stop+0x14>
 80003a4:	2301      	movs	r3, #1
 80003a6:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003ae:	fb03 f202 	mul.w	r2, r3, r2
 80003b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <Motor_Stop+0x90>)
 80003b4:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003bc:	fb03 f202 	mul.w	r2, r3, r2
 80003c0:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <Motor_Stop+0x90>)
 80003c2:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003ca:	fb03 f202 	mul.w	r2, r3, r2
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <Motor_Stop+0x90>)
 80003d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003d8:	fb03 f202 	mul.w	r2, r3, r2
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <Motor_Stop+0x90>)
 80003de:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003e6:	fb03 f202 	mul.w	r2, r3, r2
 80003ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <Motor_Stop+0x94>)
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80003f4:	fb03 f202 	mul.w	r2, r3, r2
 80003f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <Motor_Stop+0x94>)
 80003fa:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000402:	fb03 f202 	mul.w	r2, r3, r2
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <Motor_Stop+0x94>)
 8000408:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000410:	fb03 f202 	mul.w	r2, r3, r2
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <Motor_Stop+0x94>)
 8000416:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40013400 	.word	0x40013400
 8000428:	40012c00 	.word	0x40012c00

0800042c <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 800043c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff5f 	bl	8000304 <Motor_Ignore_Dead_Zone>
 8000446:	4603      	mov	r3, r0
 8000448:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800044a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800044e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000452:	db02      	blt.n	800045a <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8000454:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000458:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800045a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800045e:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8000462:	dc02      	bgt.n	800046a <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8000464:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8000468:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d867      	bhi.n	8000540 <Motor_Set_Pwm+0x114>
 8000470:	a201      	add	r2, pc, #4	@ (adr r2, 8000478 <Motor_Set_Pwm+0x4c>)
 8000472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000476:	bf00      	nop
 8000478:	08000489 	.word	0x08000489
 800047c:	080004bb 	.word	0x080004bb
 8000480:	080004ed 	.word	0x080004ed
 8000484:	08000517 	.word	0x08000517
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8000488:	89fb      	ldrh	r3, [r7, #14]
 800048a:	425b      	negs	r3, r3
 800048c:	b29b      	uxth	r3, r3
 800048e:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db07      	blt.n	80004a8 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8000498:	4a2c      	ldr	r2, [pc, #176]	@ (800054c <Motor_Set_Pwm+0x120>)
 800049a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800049e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80004a0:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80004a6:	e04c      	b.n	8000542 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80004a8:	4b28      	ldr	r3, [pc, #160]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 80004ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004b2:	425a      	negs	r2, r3
 80004b4:	4b25      	ldr	r3, [pc, #148]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004b6:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80004b8:	e043      	b.n	8000542 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	425b      	negs	r3, r3
 80004be:	b29b      	uxth	r3, r3
 80004c0:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80004c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db07      	blt.n	80004da <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80004ca:	4a20      	ldr	r2, [pc, #128]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80004d2:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80004d8:	e033      	b.n	8000542 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004dc:	2200      	movs	r2, #0
 80004de:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 80004e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004e4:	425a      	negs	r2, r3
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <Motor_Set_Pwm+0x120>)
 80004e8:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80004ea:	e02a      	b.n	8000542 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 80004ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	db07      	blt.n	8000504 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 80004f4:	4a16      	ldr	r2, [pc, #88]	@ (8000550 <Motor_Set_Pwm+0x124>)
 80004f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004fa:	6413      	str	r3, [r2, #64]	@ 0x40
            PWM_M3_B = 0;
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <Motor_Set_Pwm+0x124>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8000502:	e01e      	b.n	8000542 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <Motor_Set_Pwm+0x124>)
 8000506:	2200      	movs	r2, #0
 8000508:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 800050a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800050e:	425a      	negs	r2, r3
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <Motor_Set_Pwm+0x124>)
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8000514:	e015      	b.n	8000542 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 8000516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800051a:	2b00      	cmp	r3, #0
 800051c:	db07      	blt.n	800052e <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 800051e:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <Motor_Set_Pwm+0x124>)
 8000520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000524:	6393      	str	r3, [r2, #56]	@ 0x38
            PWM_M4_B = 0;
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <Motor_Set_Pwm+0x124>)
 8000528:	2200      	movs	r2, #0
 800052a:	63da      	str	r2, [r3, #60]	@ 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 800052c:	e009      	b.n	8000542 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <Motor_Set_Pwm+0x124>)
 8000530:	2200      	movs	r2, #0
 8000532:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 8000534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000538:	425a      	negs	r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <Motor_Set_Pwm+0x124>)
 800053c:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800053e:	e000      	b.n	8000542 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8000540:	bf00      	nop
    }
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40013400 	.word	0x40013400
 8000550:	40012c00 	.word	0x40012c00

08000554 <PwmServo_Angle_To_Pulse>:
uint16_t g_angle_num[MAX_PWM_SERVO] = {149, 149, 149, 149};

// 角度转化为脉冲数, angle= [0, 180]
// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800056e:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <PwmServo_Angle_To_Pulse+0x34>)
 8000570:	fb82 1203 	smull	r1, r2, r2, r3
 8000574:	1092      	asrs	r2, r2, #2
 8000576:	17db      	asrs	r3, r3, #31
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	81fb      	strh	r3, [r7, #14]
	return pulse;
 800057c:	89fb      	ldrh	r3, [r7, #14]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	66666667 	.word	0x66666667

0800058c <PwmServo_Handle>:

// PWM舵机控制，在定时器中调用，模拟输出PWM信号
// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	g_pwm_pulse++;
 8000590:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <PwmServo_Handle+0xac>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <PwmServo_Handle+0xac>)
 800059a:	801a      	strh	r2, [r3, #0]

#ifdef USE_SERVO_J1
	if (g_pwm_pulse <= g_angle_num[0])
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <PwmServo_Handle+0xb0>)
 800059e:	881a      	ldrh	r2, [r3, #0]
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <PwmServo_Handle+0xac>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d305      	bcc.n	80005b4 <PwmServo_Handle+0x28>
		SERVO_1_HIGH();
 80005a8:	2201      	movs	r2, #1
 80005aa:	2108      	movs	r1, #8
 80005ac:	4824      	ldr	r0, [pc, #144]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005ae:	f001 fcd7 	bl	8001f60 <HAL_GPIO_WritePin>
 80005b2:	e004      	b.n	80005be <PwmServo_Handle+0x32>
	else
		SERVO_1_LOW();
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4821      	ldr	r0, [pc, #132]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005ba:	f001 fcd1 	bl	8001f60 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J2
	if (g_pwm_pulse <= g_angle_num[1])
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <PwmServo_Handle+0xb0>)
 80005c0:	885a      	ldrh	r2, [r3, #2]
 80005c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <PwmServo_Handle+0xac>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d305      	bcc.n	80005d6 <PwmServo_Handle+0x4a>
		SERVO_2_HIGH();
 80005ca:	2201      	movs	r2, #1
 80005cc:	2104      	movs	r1, #4
 80005ce:	481c      	ldr	r0, [pc, #112]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005d0:	f001 fcc6 	bl	8001f60 <HAL_GPIO_WritePin>
 80005d4:	e004      	b.n	80005e0 <PwmServo_Handle+0x54>
	else
		SERVO_2_LOW();
 80005d6:	2200      	movs	r2, #0
 80005d8:	2104      	movs	r1, #4
 80005da:	4819      	ldr	r0, [pc, #100]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005dc:	f001 fcc0 	bl	8001f60 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J3
	if (g_pwm_pulse <= g_angle_num[2])
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <PwmServo_Handle+0xb0>)
 80005e2:	889a      	ldrh	r2, [r3, #4]
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <PwmServo_Handle+0xac>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d305      	bcc.n	80005f8 <PwmServo_Handle+0x6c>
		SERVO_3_HIGH();
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	4813      	ldr	r0, [pc, #76]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005f2:	f001 fcb5 	bl	8001f60 <HAL_GPIO_WritePin>
 80005f6:	e004      	b.n	8000602 <PwmServo_Handle+0x76>
	else
		SERVO_3_LOW();
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	4810      	ldr	r0, [pc, #64]	@ (8000640 <PwmServo_Handle+0xb4>)
 80005fe:	f001 fcaf 	bl	8001f60 <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J4
	if (g_pwm_pulse <= g_angle_num[3])
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <PwmServo_Handle+0xb0>)
 8000604:	88da      	ldrh	r2, [r3, #6]
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <PwmServo_Handle+0xac>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d305      	bcc.n	800061a <PwmServo_Handle+0x8e>
		SERVO_4_HIGH();
 800060e:	2201      	movs	r2, #1
 8000610:	2101      	movs	r1, #1
 8000612:	480b      	ldr	r0, [pc, #44]	@ (8000640 <PwmServo_Handle+0xb4>)
 8000614:	f001 fca4 	bl	8001f60 <HAL_GPIO_WritePin>
 8000618:	e004      	b.n	8000624 <PwmServo_Handle+0x98>
	else
		SERVO_4_LOW();
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4808      	ldr	r0, [pc, #32]	@ (8000640 <PwmServo_Handle+0xb4>)
 8000620:	f001 fc9e 	bl	8001f60 <HAL_GPIO_WritePin>
#endif

	if (g_pwm_pulse >= 2000)
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <PwmServo_Handle+0xac>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800062c:	d302      	bcc.n	8000634 <PwmServo_Handle+0xa8>
		g_pwm_pulse = 0;
 800062e:	4b02      	ldr	r3, [pc, #8]	@ (8000638 <PwmServo_Handle+0xac>)
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000034 	.word	0x20000034
 800063c:	20000004 	.word	0x20000004
 8000640:	40011000 	.word	0x40011000

08000644 <PwmServo_Init>:

// Initialize the steering gear  舵机初始化
void PwmServo_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e014      	b.n	800067a <PwmServo_Init+0x36>
	{
		g_pwm_angle[i] = 90;
 8000650:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <PwmServo_Init+0x48>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	225a      	movs	r2, #90	@ 0x5a
 8000658:	701a      	strb	r2, [r3, #0]
		g_angle_num[i] = PwmServo_Angle_To_Pulse(g_pwm_angle[i]);
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <PwmServo_Init+0x48>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff76 	bl	8000554 <PwmServo_Angle_To_Pulse>
 8000668:	4603      	mov	r3, r0
 800066a:	4619      	mov	r1, r3
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <PwmServo_Init+0x4c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3301      	adds	r3, #1
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b03      	cmp	r3, #3
 800067e:	dde7      	ble.n	8000650 <PwmServo_Init+0xc>
	}
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	20000004 	.word	0x20000004

08000694 <PwmServo_Set_Angle_All>:
}

// 设置全部pwm舵机的角度
// Set the Angle of all PWM steering gear
void PwmServo_Set_Angle_All(uint8_t angle_s1, uint8_t angle_s2, uint8_t angle_s3, uint8_t angle_s4)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	4603      	mov	r3, r0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	460b      	mov	r3, r1
 80006ac:	717b      	strb	r3, [r7, #5]
 80006ae:	4613      	mov	r3, r2
 80006b0:	713b      	strb	r3, [r7, #4]
	if (angle_s1 <= 180)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2bb4      	cmp	r3, #180	@ 0xb4
 80006b6:	d80a      	bhi.n	80006ce <PwmServo_Set_Angle_All+0x3a>
	{
		g_pwm_angle[0] = angle_s1;
 80006b8:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <PwmServo_Set_Angle_All+0x98>)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	7013      	strb	r3, [r2, #0]
		g_angle_num[0] = PwmServo_Angle_To_Pulse(angle_s1);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff47 	bl	8000554 <PwmServo_Angle_To_Pulse>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <PwmServo_Set_Angle_All+0x9c>)
 80006cc:	801a      	strh	r2, [r3, #0]
	}

	if (angle_s2 <= 180)
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2bb4      	cmp	r3, #180	@ 0xb4
 80006d2:	d80a      	bhi.n	80006ea <PwmServo_Set_Angle_All+0x56>
	{
		g_pwm_angle[1] = angle_s2;
 80006d4:	4a15      	ldr	r2, [pc, #84]	@ (800072c <PwmServo_Set_Angle_All+0x98>)
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	7053      	strb	r3, [r2, #1]
		g_angle_num[1] = PwmServo_Angle_To_Pulse(angle_s2);
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff39 	bl	8000554 <PwmServo_Angle_To_Pulse>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <PwmServo_Set_Angle_All+0x9c>)
 80006e8:	805a      	strh	r2, [r3, #2]
	}

	if (angle_s3 <= 180)
 80006ea:	797b      	ldrb	r3, [r7, #5]
 80006ec:	2bb4      	cmp	r3, #180	@ 0xb4
 80006ee:	d80a      	bhi.n	8000706 <PwmServo_Set_Angle_All+0x72>
	{
		g_pwm_angle[2] = angle_s3;
 80006f0:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <PwmServo_Set_Angle_All+0x98>)
 80006f2:	797b      	ldrb	r3, [r7, #5]
 80006f4:	7093      	strb	r3, [r2, #2]
		g_angle_num[2] = PwmServo_Angle_To_Pulse(angle_s3);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff2b 	bl	8000554 <PwmServo_Angle_To_Pulse>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <PwmServo_Set_Angle_All+0x9c>)
 8000704:	809a      	strh	r2, [r3, #4]
	}

	if (angle_s4 <= 180)
 8000706:	793b      	ldrb	r3, [r7, #4]
 8000708:	2bb4      	cmp	r3, #180	@ 0xb4
 800070a:	d80a      	bhi.n	8000722 <PwmServo_Set_Angle_All+0x8e>
	{
		g_pwm_angle[3] = angle_s4;
 800070c:	4a07      	ldr	r2, [pc, #28]	@ (800072c <PwmServo_Set_Angle_All+0x98>)
 800070e:	793b      	ldrb	r3, [r7, #4]
 8000710:	70d3      	strb	r3, [r2, #3]
		g_angle_num[3] = PwmServo_Angle_To_Pulse(angle_s4);
 8000712:	793b      	ldrb	r3, [r7, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff1d 	bl	8000554 <PwmServo_Angle_To_Pulse>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <PwmServo_Set_Angle_All+0x9c>)
 8000720:	80da      	strh	r2, [r3, #6]
	}
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupts the callback function  定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d101      	bne.n	800074c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		PwmServo_Handle();
 8000748:	f7ff ff20 	bl	800058c <PwmServo_Handle>
	}
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000080 	.word	0x20000080

08000758 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	4903      	ldr	r1, [pc, #12]	@ (800076c <USART1_Init+0x14>)
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <USART1_Init+0x18>)
 8000762:	f003 f9fd 	bl	8003b60 <HAL_UART_Receive_IT>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000036 	.word	0x20000036
 8000770:	20000110 	.word	0x20000110

08000774 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800077e:	1df9      	adds	r1, r7, #7
 8000780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000784:	2201      	movs	r2, #1
 8000786:	4803      	ldr	r0, [pc, #12]	@ (8000794 <USART1_Send_U8+0x20>)
 8000788:	f003 f958 	bl	8003a3c <HAL_UART_Transmit>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000110 	.word	0x20000110

08000798 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_UART_RxCpltCallback+0x24>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffe5 	bl	8000774 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	4903      	ldr	r1, [pc, #12]	@ (80007bc <HAL_UART_RxCpltCallback+0x24>)
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <HAL_UART_RxCpltCallback+0x28>)
 80007b0:	f003 f9d6 	bl	8003b60 <HAL_UART_Receive_IT>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000036 	.word	0x20000036
 80007c0:	20000110 	.word	0x20000110

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_DMA_Init+0x38>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <MX_DMA_Init+0x38>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200e      	movs	r0, #14
 80007e8:	f000 fdfb 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007ec:	200e      	movs	r0, #14
 80007ee:	f000 fe14 	bl	800141a <HAL_NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2a      	ldr	r2, [pc, #168]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a24      	ldr	r2, [pc, #144]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0308 	and.w	r3, r3, #8
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a1e      	ldr	r2, [pc, #120]	@ (80008dc <MX_GPIO_Init+0xdc>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_GPIO_Init+0xdc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|S4_Pin|S3_Pin|S2_Pin
 8000874:	2200      	movs	r2, #0
 8000876:	f242 012f 	movw	r1, #8239	@ 0x202f
 800087a:	4819      	ldr	r0, [pc, #100]	@ (80008e0 <MX_GPIO_Init+0xe0>)
 800087c:	f001 fb70 	bl	8001f60 <HAL_GPIO_WritePin>
                          |S1_Pin|BEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000880:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0xe0>)
 800089a:	f001 f9cd 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin;
 800089e:	230f      	movs	r3, #15
 80008a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	480a      	ldr	r0, [pc, #40]	@ (80008e0 <MX_GPIO_Init+0xe0>)
 80008b6:	f001 f9bf 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008ba:	2304      	movs	r3, #4
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_GPIO_Init+0xe4>)
 80008ce:	f001 f9b3 	bl	8001c38 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40011400 	.word	0x40011400

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 fc40 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f811 	bl	8000916 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f7ff ff84 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f8:	f7ff ff64 	bl	80007c4 <MX_DMA_Init>
  MX_TIM1_Init();
 80008fc:	f000 f8d8 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000900:	f000 f9d2 	bl	8000ca8 <MX_TIM8_Init>
  MX_TIM7_Init();
 8000904:	f000 f998 	bl	8000c38 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000908:	f000 fb64 	bl	8000fd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 800090c:	f7ff fc8a 	bl	8000224 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8000910:	f7ff fc92 	bl	8000238 <Bsp_Loop>
 8000914:	e7fc      	b.n	8000910 <main+0x28>

08000916 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b090      	sub	sp, #64	@ 0x40
 800091a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	2228      	movs	r2, #40	@ 0x28
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fd73 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000940:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000946:	2301      	movs	r3, #1
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000954:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000958:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fb16 	bl	8001f90 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800096a:	f000 f819 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fd83 	bl	8002494 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000994:	f000 f804 	bl	80009a0 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3740      	adds	r7, #64	@ 0x40
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_MspInit+0x60>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_MspInit+0x60>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a60:	f000 fbcc 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <DMA1_Channel4_IRQHandler+0x10>)
 8000a6e:	f000 fea7 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000154 	.word	0x20000154

08000a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USART1_IRQHandler+0x10>)
 8000a82:	f003 f89d 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000110 	.word	0x20000110

08000a90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM7_IRQHandler+0x10>)
 8000a96:	f002 f857 	bl	8002b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	@ 0x58
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fc91 	bl	8004410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aee:	4b50      	ldr	r3, [pc, #320]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000af0:	4a50      	ldr	r2, [pc, #320]	@ (8000c34 <MX_TIM1_Init+0x184>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af4:	4b4e      	ldr	r3, [pc, #312]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b4d      	ldr	r3, [pc, #308]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8000b00:	4b4b      	ldr	r3, [pc, #300]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b02:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000b06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b49      	ldr	r3, [pc, #292]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b0e:	4b48      	ldr	r3, [pc, #288]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b14:	4b46      	ldr	r3, [pc, #280]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1a:	4845      	ldr	r0, [pc, #276]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b1c:	f001 fe52 	bl	80027c4 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b26:	f7ff ff3b 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b34:	4619      	mov	r1, r3
 8000b36:	483e      	ldr	r0, [pc, #248]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b38:	f002 f9cc 	bl	8002ed4 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b42:	f7ff ff2d 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b46:	483a      	ldr	r0, [pc, #232]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b48:	f001 feec 	bl	8002924 <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b52:	f7ff ff25 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b62:	4619      	mov	r1, r3
 8000b64:	4832      	ldr	r0, [pc, #200]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b66:	f002 fe29 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b70:	f7ff ff16 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	@ 0x60
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4825      	ldr	r0, [pc, #148]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000b9a:	f002 f8dd 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ba4:	f7ff fefc 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	2204      	movs	r2, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481f      	ldr	r0, [pc, #124]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000bb2:	f002 f8d1 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000bbc:	f7ff fef0 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4819      	ldr	r0, [pc, #100]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000bca:	f002 f8c5 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bd4:	f7ff fee4 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	220c      	movs	r2, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000be2:	f002 f8b9 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bec:	f7ff fed8 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000c14:	f002 fe3e 	bl	8003894 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000c1e:	f7ff febf 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c22:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <MX_TIM1_Init+0x180>)
 8000c24:	f000 f952 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3758      	adds	r7, #88	@ 0x58
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000038 	.word	0x20000038
 8000c34:	40012c00 	.word	0x40012c00

08000c38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c48:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <MX_TIM7_Init+0x6c>)
 8000c4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c4e:	2247      	movs	r2, #71	@ 0x47
 8000c50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c5a:	2209      	movs	r2, #9
 8000c5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c64:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c66:	f001 fdad 	bl	80027c4 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000c70:	f7ff fe96 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c82:	f002 fd9b 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f7ff fe88 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  	  HAL_TIM_Base_Start_IT(&htim7);
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <MX_TIM7_Init+0x68>)
 8000c92:	f001 fde7 	bl	8002864 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000080 	.word	0x20000080
 8000ca4:	40001400 	.word	0x40001400

08000ca8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b096      	sub	sp, #88	@ 0x58
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fb95 	bl	8004410 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ce6:	4b50      	ldr	r3, [pc, #320]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000ce8:	4a50      	ldr	r2, [pc, #320]	@ (8000e2c <MX_TIM8_Init+0x184>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cec:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8000cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000cfa:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000cfe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d06:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d12:	4845      	ldr	r0, [pc, #276]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d14:	f001 fd56 	bl	80027c4 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000d1e:	f7ff fe3f 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	483e      	ldr	r0, [pc, #248]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d30:	f002 f8d0 	bl	8002ed4 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000d3a:	f7ff fe31 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d3e:	483a      	ldr	r0, [pc, #232]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d40:	f001 fdf0 	bl	8002924 <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000d4a:	f7ff fe29 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4832      	ldr	r0, [pc, #200]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d5e:	f002 fd2d 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d68:	f7ff fe1a 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	@ 0x60
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4825      	ldr	r0, [pc, #148]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000d92:	f001 ffe1 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000d9c:	f7ff fe00 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	2204      	movs	r2, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000daa:	f001 ffd5 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000db4:	f7ff fdf4 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4819      	ldr	r0, [pc, #100]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000dc2:	f001 ffc9 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000dcc:	f7ff fde8 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000dda:	f001 ffbd 	bl	8002d58 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000de4:	f7ff fddc 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000e0c:	f002 fd42 	bl	8003894 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000e16:	f7ff fdc3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e1a:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <MX_TIM8_Init+0x180>)
 8000e1c:	f000 f856 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000e20:	bf00      	nop
 8000e22:	3758      	adds	r7, #88	@ 0x58
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000c8 	.word	0x200000c8
 8000e2c:	40013400 	.word	0x40013400

08000e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ebc <HAL_TIM_Base_MspInit+0x8c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10c      	bne.n	8000e5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000e5a:	e02a      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x94>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d114      	bne.n	8000e90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2037      	movs	r0, #55	@ 0x37
 8000e84:	f000 faad 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e88:	2037      	movs	r0, #55	@ 0x37
 8000e8a:	f000 fac6 	bl	800141a <HAL_NVIC_EnableIRQ>
}
 8000e8e:	e010      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <HAL_TIM_Base_MspInit+0x98>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10b      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000ea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ea4:	6193      	str	r3, [r2, #24]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x90>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40001400 	.word	0x40001400
 8000ec8:	40013400 	.word	0x40013400

08000ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a34      	ldr	r2, [pc, #208]	@ (8000fb8 <HAL_TIM_MspPostInit+0xec>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d143      	bne.n	8000f74 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a32      	ldr	r2, [pc, #200]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a2c      	ldr	r2, [pc, #176]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4824      	ldr	r0, [pc, #144]	@ (8000fc0 <HAL_TIM_MspPostInit+0xf4>)
 8000f30:	f000 fe82 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000f34:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <HAL_TIM_MspPostInit+0xf8>)
 8000f4a:	f000 fe75 	bl	8001c38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_TIM_MspPostInit+0xfc>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6c:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <HAL_TIM_MspPostInit+0xfc>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f72:	e01d      	b.n	8000fb0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <HAL_TIM_MspPostInit+0x100>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d118      	bne.n	8000fb0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_TIM_MspPostInit+0xf0>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f96:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <HAL_TIM_MspPostInit+0x104>)
 8000fac:	f000 fe44 	bl	8001c38 <HAL_GPIO_Init>
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	@ 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012c00 	.word	0x40012c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40013400 	.word	0x40013400
 8000fd0:	40011000 	.word	0x40011000

08000fd4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_USART1_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_USART1_UART_Init+0x4c>)
 800100c:	f002 fcc9 	bl	80039a2 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f7ff fcc3 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000110 	.word	0x20000110
 8001024:	40013800 	.word	0x40013800

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_UART_MspInit+0xe8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d15f      	bne.n	8001108 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001048:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <HAL_UART_MspInit+0xec>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <HAL_UART_MspInit+0xec>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <HAL_UART_MspInit+0xec>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <HAL_UART_MspInit+0xec>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <HAL_UART_MspInit+0xec>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_UART_MspInit+0xec>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	4822      	ldr	r0, [pc, #136]	@ (8001118 <HAL_UART_MspInit+0xf0>)
 800108e:	f000 fdd3 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <HAL_UART_MspInit+0xf0>)
 80010a8:	f000 fdc6 	bl	8001c38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <HAL_UART_MspInit+0xf8>)
 80010b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010b4:	2210      	movs	r2, #16
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010c0:	2280      	movs	r2, #128	@ 0x80
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010dc:	480f      	ldr	r0, [pc, #60]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010de:	f000 f9b7 	bl	8001450 <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80010e8:	f7ff fc5a 	bl	80009a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_UART_MspInit+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2025      	movs	r0, #37	@ 0x25
 80010fe:	f000 f970 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001102:	2025      	movs	r0, #37	@ 0x25
 8001104:	f000 f989 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40013800 	.word	0x40013800
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	20000154 	.word	0x20000154
 8001120:	40020044 	.word	0x40020044

08001124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114a:	f7ff fcab 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f003 f967 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff fbc9 	bl	80008e8 <main>
  bx lr
 8001156:	4770      	bx	lr
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001160:	080044b0 	.word	0x080044b0
  ldr r2, =_sbss
 8001164:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001168:	2000019c 	.word	0x2000019c

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f923 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fc0e 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f93b 	bl	8001436 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f903 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000014 	.word	0x20000014
 80011f8:	20000010 	.word	0x20000010

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a03      	ldr	r2, [pc, #12]	@ (800121c <HAL_IncTick+0x20>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000014 	.word	0x20000014
 800121c:	20000198 	.word	0x20000198

08001220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	@ (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000198 	.word	0x20000198

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	@ (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e059      	b.n	800151a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_DMA_Init+0xd4>)
 800146e:	429a      	cmp	r2, r3
 8001470:	d80f      	bhi.n	8001492 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <HAL_DMA_Init+0xd8>)
 800147a:	4413      	add	r3, r2
 800147c:	4a2b      	ldr	r2, [pc, #172]	@ (800152c <HAL_DMA_Init+0xdc>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <HAL_DMA_Init+0xe0>)
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001490:	e00e      	b.n	80014b0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_DMA_Init+0xe4>)
 800149a:	4413      	add	r3, r2
 800149c:	4a23      	ldr	r2, [pc, #140]	@ (800152c <HAL_DMA_Init+0xdc>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <HAL_DMA_Init+0xe8>)
 80014ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80014c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80014ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40020407 	.word	0x40020407
 8001528:	bffdfff8 	.word	0xbffdfff8
 800152c:	cccccccd 	.word	0xcccccccd
 8001530:	40020000 	.word	0x40020000
 8001534:	bffdfbf8 	.word	0xbffdfbf8
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800154e:	2b02      	cmp	r3, #2
 8001550:	d008      	beq.n	8001564 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e020      	b.n	80015a6 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d005      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e0d6      	b.n	8001780 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b64      	ldr	r3, [pc, #400]	@ (800178c <HAL_DMA_Abort_IT+0x1dc>)
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d958      	bls.n	80016b0 <HAL_DMA_Abort_IT+0x100>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a63      	ldr	r2, [pc, #396]	@ (8001790 <HAL_DMA_Abort_IT+0x1e0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d04f      	beq.n	80016a8 <HAL_DMA_Abort_IT+0xf8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a61      	ldr	r2, [pc, #388]	@ (8001794 <HAL_DMA_Abort_IT+0x1e4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d048      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xf4>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a60      	ldr	r2, [pc, #384]	@ (8001798 <HAL_DMA_Abort_IT+0x1e8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d040      	beq.n	800169e <HAL_DMA_Abort_IT+0xee>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5e      	ldr	r2, [pc, #376]	@ (800179c <HAL_DMA_Abort_IT+0x1ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d038      	beq.n	8001698 <HAL_DMA_Abort_IT+0xe8>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_DMA_Abort_IT+0x1f0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d030      	beq.n	8001692 <HAL_DMA_Abort_IT+0xe2>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a5b      	ldr	r2, [pc, #364]	@ (80017a4 <HAL_DMA_Abort_IT+0x1f4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d028      	beq.n	800168c <HAL_DMA_Abort_IT+0xdc>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a53      	ldr	r2, [pc, #332]	@ (800178c <HAL_DMA_Abort_IT+0x1dc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d020      	beq.n	8001686 <HAL_DMA_Abort_IT+0xd6>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a57      	ldr	r2, [pc, #348]	@ (80017a8 <HAL_DMA_Abort_IT+0x1f8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <HAL_DMA_Abort_IT+0xd2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a56      	ldr	r2, [pc, #344]	@ (80017ac <HAL_DMA_Abort_IT+0x1fc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d012      	beq.n	800167e <HAL_DMA_Abort_IT+0xce>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a54      	ldr	r2, [pc, #336]	@ (80017b0 <HAL_DMA_Abort_IT+0x200>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00a      	beq.n	8001678 <HAL_DMA_Abort_IT+0xc8>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <HAL_DMA_Abort_IT+0x204>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_DMA_Abort_IT+0xc2>
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	e01b      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	e018      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001678:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167c:	e015      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 800167e:	2310      	movs	r3, #16
 8001680:	e013      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001682:	2301      	movs	r3, #1
 8001684:	e011      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800168a:	e00e      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 800168c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001690:	e00b      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001692:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001696:	e008      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 8001698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169c:	e005      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 800169e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a2:	e002      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 80016a4:	2310      	movs	r3, #16
 80016a6:	e000      	b.n	80016aa <HAL_DMA_Abort_IT+0xfa>
 80016a8:	2301      	movs	r3, #1
 80016aa:	4a43      	ldr	r2, [pc, #268]	@ (80017b8 <HAL_DMA_Abort_IT+0x208>)
 80016ac:	6053      	str	r3, [r2, #4]
 80016ae:	e057      	b.n	8001760 <HAL_DMA_Abort_IT+0x1b0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a36      	ldr	r2, [pc, #216]	@ (8001790 <HAL_DMA_Abort_IT+0x1e0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d04f      	beq.n	800175a <HAL_DMA_Abort_IT+0x1aa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <HAL_DMA_Abort_IT+0x1e4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d048      	beq.n	8001756 <HAL_DMA_Abort_IT+0x1a6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a33      	ldr	r2, [pc, #204]	@ (8001798 <HAL_DMA_Abort_IT+0x1e8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d040      	beq.n	8001750 <HAL_DMA_Abort_IT+0x1a0>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a32      	ldr	r2, [pc, #200]	@ (800179c <HAL_DMA_Abort_IT+0x1ec>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d038      	beq.n	800174a <HAL_DMA_Abort_IT+0x19a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a30      	ldr	r2, [pc, #192]	@ (80017a0 <HAL_DMA_Abort_IT+0x1f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d030      	beq.n	8001744 <HAL_DMA_Abort_IT+0x194>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a2f      	ldr	r2, [pc, #188]	@ (80017a4 <HAL_DMA_Abort_IT+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d028      	beq.n	800173e <HAL_DMA_Abort_IT+0x18e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a26      	ldr	r2, [pc, #152]	@ (800178c <HAL_DMA_Abort_IT+0x1dc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d020      	beq.n	8001738 <HAL_DMA_Abort_IT+0x188>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2b      	ldr	r2, [pc, #172]	@ (80017a8 <HAL_DMA_Abort_IT+0x1f8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d019      	beq.n	8001734 <HAL_DMA_Abort_IT+0x184>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a29      	ldr	r2, [pc, #164]	@ (80017ac <HAL_DMA_Abort_IT+0x1fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d012      	beq.n	8001730 <HAL_DMA_Abort_IT+0x180>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <HAL_DMA_Abort_IT+0x200>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00a      	beq.n	800172a <HAL_DMA_Abort_IT+0x17a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <HAL_DMA_Abort_IT+0x204>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d102      	bne.n	8001724 <HAL_DMA_Abort_IT+0x174>
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	e01b      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	e018      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 800172a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172e:	e015      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001730:	2310      	movs	r3, #16
 8001732:	e013      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001734:	2301      	movs	r3, #1
 8001736:	e011      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800173c:	e00e      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 800173e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001742:	e00b      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	e008      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	e005      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	e002      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 8001756:	2310      	movs	r3, #16
 8001758:	e000      	b.n	800175c <HAL_DMA_Abort_IT+0x1ac>
 800175a:	2301      	movs	r3, #1
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <HAL_DMA_Abort_IT+0x20c>)
 800175e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
    } 
  }
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020080 	.word	0x40020080
 8001790:	40020008 	.word	0x40020008
 8001794:	4002001c 	.word	0x4002001c
 8001798:	40020030 	.word	0x40020030
 800179c:	40020044 	.word	0x40020044
 80017a0:	40020058 	.word	0x40020058
 80017a4:	4002006c 	.word	0x4002006c
 80017a8:	40020408 	.word	0x40020408
 80017ac:	4002041c 	.word	0x4002041c
 80017b0:	40020430 	.word	0x40020430
 80017b4:	40020444 	.word	0x40020444
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020000 	.word	0x40020000

080017c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	2204      	movs	r2, #4
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80f1 	beq.w	80019cc <HAL_DMA_IRQHandler+0x20c>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80eb 	beq.w	80019cc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b5f      	ldr	r3, [pc, #380]	@ (8001998 <HAL_DMA_IRQHandler+0x1d8>)
 800181c:	429a      	cmp	r2, r3
 800181e:	d958      	bls.n	80018d2 <HAL_DMA_IRQHandler+0x112>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5d      	ldr	r2, [pc, #372]	@ (800199c <HAL_DMA_IRQHandler+0x1dc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d04f      	beq.n	80018ca <HAL_DMA_IRQHandler+0x10a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a5c      	ldr	r2, [pc, #368]	@ (80019a0 <HAL_DMA_IRQHandler+0x1e0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d048      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x106>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5a      	ldr	r2, [pc, #360]	@ (80019a4 <HAL_DMA_IRQHandler+0x1e4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d040      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x100>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a59      	ldr	r2, [pc, #356]	@ (80019a8 <HAL_DMA_IRQHandler+0x1e8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d038      	beq.n	80018ba <HAL_DMA_IRQHandler+0xfa>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a57      	ldr	r2, [pc, #348]	@ (80019ac <HAL_DMA_IRQHandler+0x1ec>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d030      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xf4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d028      	beq.n	80018ae <HAL_DMA_IRQHandler+0xee>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a4d      	ldr	r2, [pc, #308]	@ (8001998 <HAL_DMA_IRQHandler+0x1d8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d020      	beq.n	80018a8 <HAL_DMA_IRQHandler+0xe8>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_DMA_IRQHandler+0x1f4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d019      	beq.n	80018a4 <HAL_DMA_IRQHandler+0xe4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d012      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xe0>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a4f      	ldr	r2, [pc, #316]	@ (80019bc <HAL_DMA_IRQHandler+0x1fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00a      	beq.n	800189a <HAL_DMA_IRQHandler+0xda>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a4d      	ldr	r2, [pc, #308]	@ (80019c0 <HAL_DMA_IRQHandler+0x200>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <HAL_DMA_IRQHandler+0xd4>
 800188e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001892:	e01b      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 8001894:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001898:	e018      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 800189a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189e:	e015      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018a0:	2340      	movs	r3, #64	@ 0x40
 80018a2:	e013      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e011      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018ac:	e00e      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018b2:	e00b      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018b8:	e008      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018be:	e005      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c4:	e002      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018c6:	2340      	movs	r3, #64	@ 0x40
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x10c>
 80018ca:	2304      	movs	r3, #4
 80018cc:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <HAL_DMA_IRQHandler+0x204>)
 80018ce:	6053      	str	r3, [r2, #4]
 80018d0:	e057      	b.n	8001982 <HAL_DMA_IRQHandler+0x1c2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a31      	ldr	r2, [pc, #196]	@ (800199c <HAL_DMA_IRQHandler+0x1dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04f      	beq.n	800197c <HAL_DMA_IRQHandler+0x1bc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2f      	ldr	r2, [pc, #188]	@ (80019a0 <HAL_DMA_IRQHandler+0x1e0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d048      	beq.n	8001978 <HAL_DMA_IRQHandler+0x1b8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2e      	ldr	r2, [pc, #184]	@ (80019a4 <HAL_DMA_IRQHandler+0x1e4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_DMA_IRQHandler+0x1b2>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2c      	ldr	r2, [pc, #176]	@ (80019a8 <HAL_DMA_IRQHandler+0x1e8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d038      	beq.n	800196c <HAL_DMA_IRQHandler+0x1ac>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2b      	ldr	r2, [pc, #172]	@ (80019ac <HAL_DMA_IRQHandler+0x1ec>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d030      	beq.n	8001966 <HAL_DMA_IRQHandler+0x1a6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a29      	ldr	r2, [pc, #164]	@ (80019b0 <HAL_DMA_IRQHandler+0x1f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d028      	beq.n	8001960 <HAL_DMA_IRQHandler+0x1a0>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <HAL_DMA_IRQHandler+0x1d8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d020      	beq.n	800195a <HAL_DMA_IRQHandler+0x19a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a25      	ldr	r2, [pc, #148]	@ (80019b4 <HAL_DMA_IRQHandler+0x1f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d019      	beq.n	8001956 <HAL_DMA_IRQHandler+0x196>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <HAL_DMA_IRQHandler+0x1f8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d012      	beq.n	8001952 <HAL_DMA_IRQHandler+0x192>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_DMA_IRQHandler+0x1fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00a      	beq.n	800194c <HAL_DMA_IRQHandler+0x18c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a21      	ldr	r2, [pc, #132]	@ (80019c0 <HAL_DMA_IRQHandler+0x200>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <HAL_DMA_IRQHandler+0x186>
 8001940:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001944:	e01b      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001946:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800194a:	e018      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 800194c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001950:	e015      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001952:	2340      	movs	r3, #64	@ 0x40
 8001954:	e013      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001956:	2304      	movs	r3, #4
 8001958:	e011      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 800195a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800195e:	e00e      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001960:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001964:	e00b      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001966:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800196a:	e008      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 800196c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001970:	e005      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001976:	e002      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 8001978:	2340      	movs	r3, #64	@ 0x40
 800197a:	e000      	b.n	800197e <HAL_DMA_IRQHandler+0x1be>
 800197c:	2304      	movs	r3, #4
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_DMA_IRQHandler+0x208>)
 8001980:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8136 	beq.w	8001bf8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001994:	e130      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x438>
 8001996:	bf00      	nop
 8001998:	40020080 	.word	0x40020080
 800199c:	40020008 	.word	0x40020008
 80019a0:	4002001c 	.word	0x4002001c
 80019a4:	40020030 	.word	0x40020030
 80019a8:	40020044 	.word	0x40020044
 80019ac:	40020058 	.word	0x40020058
 80019b0:	4002006c 	.word	0x4002006c
 80019b4:	40020408 	.word	0x40020408
 80019b8:	4002041c 	.word	0x4002041c
 80019bc:	40020430 	.word	0x40020430
 80019c0:	40020444 	.word	0x40020444
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	2202      	movs	r2, #2
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80dd 	beq.w	8001b98 <HAL_DMA_IRQHandler+0x3d8>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80d7 	beq.w	8001b98 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10b      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 020a 	bic.w	r2, r2, #10
 8001a06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b7b      	ldr	r3, [pc, #492]	@ (8001c04 <HAL_DMA_IRQHandler+0x444>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d958      	bls.n	8001ace <HAL_DMA_IRQHandler+0x30e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a79      	ldr	r2, [pc, #484]	@ (8001c08 <HAL_DMA_IRQHandler+0x448>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d04f      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x306>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a78      	ldr	r2, [pc, #480]	@ (8001c0c <HAL_DMA_IRQHandler+0x44c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d048      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x302>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a76      	ldr	r2, [pc, #472]	@ (8001c10 <HAL_DMA_IRQHandler+0x450>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d040      	beq.n	8001abc <HAL_DMA_IRQHandler+0x2fc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_DMA_IRQHandler+0x454>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d038      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x2f6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a73      	ldr	r2, [pc, #460]	@ (8001c18 <HAL_DMA_IRQHandler+0x458>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d030      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x2f0>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a72      	ldr	r2, [pc, #456]	@ (8001c1c <HAL_DMA_IRQHandler+0x45c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d028      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x2ea>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a69      	ldr	r2, [pc, #420]	@ (8001c04 <HAL_DMA_IRQHandler+0x444>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d020      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2e4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	@ (8001c20 <HAL_DMA_IRQHandler+0x460>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d019      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x2e0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6c      	ldr	r2, [pc, #432]	@ (8001c24 <HAL_DMA_IRQHandler+0x464>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d012      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x2dc>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6b      	ldr	r2, [pc, #428]	@ (8001c28 <HAL_DMA_IRQHandler+0x468>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00a      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x2d6>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a69      	ldr	r2, [pc, #420]	@ (8001c2c <HAL_DMA_IRQHandler+0x46c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d102      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x2d0>
 8001a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8e:	e01b      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001a90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a94:	e018      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9a:	e015      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	e013      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e011      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001aa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa8:	e00e      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001aaa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aae:	e00b      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001ab0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab4:	e008      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aba:	e005      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac0:	e002      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e000      	b.n	8001ac8 <HAL_DMA_IRQHandler+0x308>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	4a59      	ldr	r2, [pc, #356]	@ (8001c30 <HAL_DMA_IRQHandler+0x470>)
 8001aca:	6053      	str	r3, [r2, #4]
 8001acc:	e057      	b.n	8001b7e <HAL_DMA_IRQHandler+0x3be>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a4d      	ldr	r2, [pc, #308]	@ (8001c08 <HAL_DMA_IRQHandler+0x448>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04f      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x3b8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	@ (8001c0c <HAL_DMA_IRQHandler+0x44c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d048      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x3b4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8001c10 <HAL_DMA_IRQHandler+0x450>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d040      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x3ae>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a48      	ldr	r2, [pc, #288]	@ (8001c14 <HAL_DMA_IRQHandler+0x454>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d038      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x3a8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a47      	ldr	r2, [pc, #284]	@ (8001c18 <HAL_DMA_IRQHandler+0x458>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d030      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x3a2>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a45      	ldr	r2, [pc, #276]	@ (8001c1c <HAL_DMA_IRQHandler+0x45c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d028      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x39c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c04 <HAL_DMA_IRQHandler+0x444>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d020      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x396>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a41      	ldr	r2, [pc, #260]	@ (8001c20 <HAL_DMA_IRQHandler+0x460>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x392>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a40      	ldr	r2, [pc, #256]	@ (8001c24 <HAL_DMA_IRQHandler+0x464>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d012      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x38e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c28 <HAL_DMA_IRQHandler+0x468>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00a      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x388>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a3d      	ldr	r2, [pc, #244]	@ (8001c2c <HAL_DMA_IRQHandler+0x46c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <HAL_DMA_IRQHandler+0x382>
 8001b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b40:	e01b      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b46:	e018      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b4c:	e015      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b4e:	2320      	movs	r3, #32
 8001b50:	e013      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e011      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b5a:	e00e      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b60:	e00b      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b66:	e008      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b6c:	e005      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b72:	e002      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b74:	2320      	movs	r3, #32
 8001b76:	e000      	b.n	8001b7a <HAL_DMA_IRQHandler+0x3ba>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c34 <HAL_DMA_IRQHandler+0x474>)
 8001b7c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d034      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b96:	e02f      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d028      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x43a>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d023      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 020e 	bic.w	r2, r2, #14
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    }
  }
  return;
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
}
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020080 	.word	0x40020080
 8001c08:	40020008 	.word	0x40020008
 8001c0c:	4002001c 	.word	0x4002001c
 8001c10:	40020030 	.word	0x40020030
 8001c14:	40020044 	.word	0x40020044
 8001c18:	40020058 	.word	0x40020058
 8001c1c:	4002006c 	.word	0x4002006c
 8001c20:	40020408 	.word	0x40020408
 8001c24:	4002041c 	.word	0x4002041c
 8001c28:	40020430 	.word	0x40020430
 8001c2c:	40020444 	.word	0x40020444
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020000 	.word	0x40020000

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b08b      	sub	sp, #44	@ 0x2c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e179      	b.n	8001f40 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8168 	bne.w	8001f3a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a96      	ldr	r2, [pc, #600]	@ (8001ec8 <HAL_GPIO_Init+0x290>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c74:	4a94      	ldr	r2, [pc, #592]	@ (8001ec8 <HAL_GPIO_Init+0x290>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d875      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c7a:	4a94      	ldr	r2, [pc, #592]	@ (8001ecc <HAL_GPIO_Init+0x294>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d058      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c80:	4a92      	ldr	r2, [pc, #584]	@ (8001ecc <HAL_GPIO_Init+0x294>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d86f      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c86:	4a92      	ldr	r2, [pc, #584]	@ (8001ed0 <HAL_GPIO_Init+0x298>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d052      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a90      	ldr	r2, [pc, #576]	@ (8001ed0 <HAL_GPIO_Init+0x298>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d869      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c92:	4a90      	ldr	r2, [pc, #576]	@ (8001ed4 <HAL_GPIO_Init+0x29c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d04c      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001c98:	4a8e      	ldr	r2, [pc, #568]	@ (8001ed4 <HAL_GPIO_Init+0x29c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d863      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001c9e:	4a8e      	ldr	r2, [pc, #568]	@ (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d046      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a8c      	ldr	r2, [pc, #560]	@ (8001ed8 <HAL_GPIO_Init+0x2a0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d85d      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d82a      	bhi.n	8001d04 <HAL_GPIO_Init+0xcc>
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d859      	bhi.n	8001d66 <HAL_GPIO_Init+0x12e>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <HAL_GPIO_Init+0x80>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001d33 	.word	0x08001d33
 8001cbc:	08001d0d 	.word	0x08001d0d
 8001cc0:	08001d1f 	.word	0x08001d1f
 8001cc4:	08001d61 	.word	0x08001d61
 8001cc8:	08001d67 	.word	0x08001d67
 8001ccc:	08001d67 	.word	0x08001d67
 8001cd0:	08001d67 	.word	0x08001d67
 8001cd4:	08001d67 	.word	0x08001d67
 8001cd8:	08001d67 	.word	0x08001d67
 8001cdc:	08001d67 	.word	0x08001d67
 8001ce0:	08001d67 	.word	0x08001d67
 8001ce4:	08001d67 	.word	0x08001d67
 8001ce8:	08001d67 	.word	0x08001d67
 8001cec:	08001d67 	.word	0x08001d67
 8001cf0:	08001d67 	.word	0x08001d67
 8001cf4:	08001d67 	.word	0x08001d67
 8001cf8:	08001d67 	.word	0x08001d67
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d29 	.word	0x08001d29
 8001d04:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_GPIO_Init+0x2a4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d0a:	e02c      	b.n	8001d66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e029      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e024      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	3308      	adds	r3, #8
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e01f      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	330c      	adds	r3, #12
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e01a      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e013      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	611a      	str	r2, [r3, #16]
          break;
 8001d52:	e009      	b.n	8001d68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d54:	2308      	movs	r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	615a      	str	r2, [r3, #20]
          break;
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x130>
          break;
 8001d66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2bff      	cmp	r3, #255	@ 0xff
 8001d6c:	d801      	bhi.n	8001d72 <HAL_GPIO_Init+0x13a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_Init+0x13e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2bff      	cmp	r3, #255	@ 0xff
 8001d7c:	d802      	bhi.n	8001d84 <HAL_GPIO_Init+0x14c>
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x152>
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	3b08      	subs	r3, #8
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	210f      	movs	r1, #15
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80c1 	beq.w	8001f3a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db8:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ee0 <HAL_GPIO_Init+0x2a8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd0:	4a44      	ldr	r2, [pc, #272]	@ (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee8 <HAL_GPIO_Init+0x2b0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d01f      	beq.n	8001e3c <HAL_GPIO_Init+0x204>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001eec <HAL_GPIO_Init+0x2b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d019      	beq.n	8001e38 <HAL_GPIO_Init+0x200>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef0 <HAL_GPIO_Init+0x2b8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_GPIO_Init+0x1fc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a39      	ldr	r2, [pc, #228]	@ (8001ef4 <HAL_GPIO_Init+0x2bc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1f8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a38      	ldr	r2, [pc, #224]	@ (8001ef8 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1f4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a37      	ldr	r2, [pc, #220]	@ (8001efc <HAL_GPIO_Init+0x2c4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1f0>
 8001e24:	2305      	movs	r3, #5
 8001e26:	e00a      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e28:	2306      	movs	r3, #6
 8001e2a:	e008      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e4e:	4925      	ldr	r1, [pc, #148]	@ (8001ee4 <HAL_GPIO_Init+0x2ac>)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4924      	ldr	r1, [pc, #144]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e76:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4920      	ldr	r1, [pc, #128]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	491a      	ldr	r1, [pc, #104]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4916      	ldr	r1, [pc, #88]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d025      	beq.n	8001f04 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4910      	ldr	r1, [pc, #64]	@ (8001f00 <HAL_GPIO_Init+0x2c8>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
 8001ec4:	e025      	b.n	8001f12 <HAL_GPIO_Init+0x2da>
 8001ec6:	bf00      	nop
 8001ec8:	10320000 	.word	0x10320000
 8001ecc:	10310000 	.word	0x10310000
 8001ed0:	10220000 	.word	0x10220000
 8001ed4:	10210000 	.word	0x10210000
 8001ed8:	10120000 	.word	0x10120000
 8001edc:	10110000 	.word	0x10110000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40011400 	.word	0x40011400
 8001ef8:	40011800 	.word	0x40011800
 8001efc:	40011c00 	.word	0x40011c00
 8001f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f04:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	4913      	ldr	r1, [pc, #76]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
 8001f2a:	e006      	b.n	8001f3a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4909      	ldr	r1, [pc, #36]	@ (8001f5c <HAL_GPIO_Init+0x324>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f47f ae7e 	bne.w	8001c4c <HAL_GPIO_Init+0x14>
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	372c      	adds	r7, #44	@ 0x2c
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e272      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8087 	beq.w	80020be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb0:	4b92      	ldr	r3, [pc, #584]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d00c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d112      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d10b      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	4b89      	ldr	r3, [pc, #548]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d06c      	beq.n	80020bc <HAL_RCC_OscConfig+0x12c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d168      	bne.n	80020bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e24c      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x76>
 8001ff8:	4b80      	ldr	r3, [pc, #512]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e02e      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x98>
 800200e:	4b7b      	ldr	r3, [pc, #492]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7a      	ldr	r2, [pc, #488]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b78      	ldr	r3, [pc, #480]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a77      	ldr	r2, [pc, #476]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0xbc>
 8002032:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a71      	ldr	r2, [pc, #452]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 800204c:	4b6b      	ldr	r3, [pc, #428]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6a      	ldr	r2, [pc, #424]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b68      	ldr	r3, [pc, #416]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a67      	ldr	r2, [pc, #412]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff f8d8 	bl	8001220 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff f8d4 	bl	8001220 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e200      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xe4>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f8c4 	bl	8001220 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff f8c0 	bl	8001220 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	@ 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1ec      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x10c>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020d6:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11c      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e1c0      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4939      	ldr	r1, [pc, #228]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	e03a      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_RCC_OscConfig+0x270>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff f879 	bl	8001220 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f875 	bl	8001220 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1a1      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4927      	ldr	r1, [pc, #156]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_RCC_OscConfig+0x270>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f858 	bl	8001220 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7ff f854 	bl	8001220 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e180      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03a      	beq.n	8002214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d019      	beq.n	80021da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7ff f838 	bl	8001220 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f834 	bl	8001220 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e160      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f000 fad8 	bl	8002788 <RCC_Delay>
 80021d8:	e01c      	b.n	8002214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff f81e 	bl	8001220 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e6:	e00f      	b.n	8002208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f81a 	bl	8001220 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d908      	bls.n	8002208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e146      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	42420000 	.word	0x42420000
 8002204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b92      	ldr	r3, [pc, #584]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e9      	bne.n	80021e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a6 	beq.w	800236e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b8b      	ldr	r3, [pc, #556]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a87      	ldr	r2, [pc, #540]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b85      	ldr	r3, [pc, #532]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b82      	ldr	r3, [pc, #520]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b7f      	ldr	r3, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe ffdb 	bl	8001220 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe ffd7 	bl	8001220 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	@ 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e103      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b75      	ldr	r3, [pc, #468]	@ (8002458 <HAL_RCC_OscConfig+0x4c8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x312>
 8002294:	4b6f      	ldr	r3, [pc, #444]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a6e      	ldr	r2, [pc, #440]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e02d      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x334>
 80022aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a69      	ldr	r2, [pc, #420]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b67      	ldr	r3, [pc, #412]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a66      	ldr	r2, [pc, #408]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x356>
 80022cc:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a60      	ldr	r2, [pc, #384]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a57      	ldr	r2, [pc, #348]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe ff8b 	bl	8001220 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe ff87 	bl	8001220 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0b1      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b4b      	ldr	r3, [pc, #300]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x37e>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe ff75 	bl	8001220 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe ff71 	bl	8001220 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e09b      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b40      	ldr	r3, [pc, #256]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a3b      	ldr	r2, [pc, #236]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8087 	beq.w	8002486 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002378:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d061      	beq.n	8002448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d146      	bne.n	800241a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ff45 	bl	8001220 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe ff41 	bl	8001220 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e06d      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4921      	ldr	r1, [pc, #132]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a19      	ldr	r1, [r3, #32]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	430b      	orrs	r3, r1
 80023e6:	491b      	ldr	r1, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe ff15 	bl	8001220 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe ff11 	bl	8001220 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e03d      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x46a>
 8002418:	e035      	b.n	8002486 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_OscConfig+0x4cc>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fefe 	bl	8001220 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fefa 	bl	8001220 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e026      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x498>
 8002446:	e01e      	b.n	8002486 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e019      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_OscConfig+0x500>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	429a      	cmp	r2, r3
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d0      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4965      	ldr	r1, [pc, #404]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a58      	ldr	r2, [pc, #352]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b41      	ldr	r3, [pc, #260]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b39      	ldr	r3, [pc, #228]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4936      	ldr	r1, [pc, #216]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7fe fe4c 	bl	8001220 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fe48 	bl	8001220 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e053      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4922      	ldr	r1, [pc, #136]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	@ (8002660 <HAL_RCC_ClockConfig+0x1cc>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_ClockConfig+0x1d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fdaa 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	08004490 	.word	0x08004490
 8002660:	2000000c 	.word	0x2000000c
 8002664:	20000010 	.word	0x20000010

08002668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b490      	push	{r4, r7}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xac>)
 8002670:	1d3c      	adds	r4, r7, #4
 8002672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002678:	f240 2301 	movw	r3, #513	@ 0x201
 800267c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x46>
 80026a6:	e02b      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026aa:	623b      	str	r3, [r7, #32]
      break;
 80026ac:	e02b      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0c9b      	lsrs	r3, r3, #18
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3328      	adds	r3, #40	@ 0x28
 80026b8:	443b      	add	r3, r7
 80026ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ca:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c5b      	lsrs	r3, r3, #17
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	3328      	adds	r3, #40	@ 0x28
 80026d6:	443b      	add	r3, r7
 80026d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ee:	e004      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	623b      	str	r3, [r7, #32]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002702:	623b      	str	r3, [r7, #32]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6a3b      	ldr	r3, [r7, #32]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc90      	pop	{r4, r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	08004480 	.word	0x08004480
 8002718:	40021000 	.word	0x40021000
 800271c:	007a1200 	.word	0x007a1200
 8002720:	003d0900 	.word	0x003d0900

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b02      	ldr	r3, [pc, #8]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x10>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	2000000c 	.word	0x2000000c

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff2 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	080044a0 	.word	0x080044a0

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffde 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0adb      	lsrs	r3, r3, #11
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	080044a0 	.word	0x080044a0

08002788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <RCC_Delay+0x34>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <RCC_Delay+0x38>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0a5b      	lsrs	r3, r3, #9
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a4:	bf00      	nop
  }
  while (Delay --);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	60fa      	str	r2, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f9      	bne.n	80027a4 <RCC_Delay+0x1c>
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e041      	b.n	800285a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fb20 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 fc4e 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d001      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e044      	b.n	8002906 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1d      	ldr	r2, [pc, #116]	@ (8002910 <HAL_TIM_Base_Start_IT+0xac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x6c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_TIM_Base_Start_IT+0xb0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x6c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b0:	d00e      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x6c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_TIM_Base_Start_IT+0xb4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x6c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a16      	ldr	r2, [pc, #88]	@ (800291c <HAL_TIM_Base_Start_IT+0xb8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x6c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a15      	ldr	r2, [pc, #84]	@ (8002920 <HAL_TIM_Base_Start_IT+0xbc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d010      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	e007      	b.n	8002904 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40013400 	.word	0x40013400
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00

08002924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f839 	bl	80029c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 fb9e 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_TIM_PWM_Start+0x24>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e022      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d109      	bne.n	8002a12 <HAL_TIM_PWM_Start+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e015      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_PWM_Start+0x6a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e072      	b.n	8002b2c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x82>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_PWM_Start+0x92>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_PWM_Start+0xa2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_PWM_Start+0xaa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fdc8 	bl	800361c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a28      	ldr	r2, [pc, #160]	@ (8002b34 <HAL_TIM_PWM_Start+0x160>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_PWM_Start+0xcc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a27      	ldr	r2, [pc, #156]	@ (8002b38 <HAL_TIM_PWM_Start+0x164>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIM_PWM_Start+0xd0>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_PWM_Start+0xd2>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_TIM_PWM_Start+0x160>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x122>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <HAL_TIM_PWM_Start+0x164>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x122>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad6:	d00e      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x122>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HAL_TIM_PWM_Start+0x168>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x122>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	@ (8002b40 <HAL_TIM_PWM_Start+0x16c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x122>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <HAL_TIM_PWM_Start+0x170>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d111      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d010      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	e007      	b.n	8002b2a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40013400 	.word	0x40013400
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	40000800 	.word	0x40000800
 8002b44:	40000c00 	.word	0x40000c00

08002b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0202 	mvn.w	r2, #2
 8002b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa6f 	bl	800306e <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa62 	bl	800305c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa71 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0204 	mvn.w	r2, #4
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa45 	bl	800306e <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa38 	bl	800305c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa47 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa1b 	bl	800306e <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa0e 	bl	800305c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa1d 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9f1 	bl	800306e <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9e4 	bl	800305c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f9f3 	bl	8003080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fd34 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce4:	2b80      	cmp	r3, #128	@ 0x80
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fe28 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b40      	cmp	r3, #64	@ 0x40
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9b7 	bl	8003092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0220 	mvn.w	r2, #32
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fdf3 	bl	8003936 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0ac      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	f200 809f 	bhi.w	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002ec1 	.word	0x08002ec1
 8002d90:	08002ec1 	.word	0x08002ec1
 8002d94:	08002ec1 	.word	0x08002ec1
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	08002ec1 	.word	0x08002ec1
 8002da0:	08002ec1 	.word	0x08002ec1
 8002da4:	08002ec1 	.word	0x08002ec1
 8002da8:	08002e3f 	.word	0x08002e3f
 8002dac:	08002ec1 	.word	0x08002ec1
 8002db0:	08002ec1 	.word	0x08002ec1
 8002db4:	08002ec1 	.word	0x08002ec1
 8002db8:	08002e7f 	.word	0x08002e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f9e8 	bl	8003198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	619a      	str	r2, [r3, #24]
      break;
 8002dfa:	e062      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fa38 	bl	8003278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6999      	ldr	r1, [r3, #24]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	021a      	lsls	r2, r3, #8
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	619a      	str	r2, [r3, #24]
      break;
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fa8b 	bl	8003360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0208 	orr.w	r2, r2, #8
 8002e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69d9      	ldr	r1, [r3, #28]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	61da      	str	r2, [r3, #28]
      break;
 8002e7c:	e021      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fadf 	bl	8003448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69d9      	ldr	r1, [r3, #28]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	021a      	lsls	r2, r3, #8
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]
      break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_ConfigClockSource+0x18>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0b3      	b.n	8003054 <HAL_TIM_ConfigClockSource+0x180>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f24:	d03e      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0xd0>
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2a:	f200 8087 	bhi.w	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f32:	f000 8085 	beq.w	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3a:	d87f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f3c:	2b70      	cmp	r3, #112	@ 0x70
 8002f3e:	d01a      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0xa2>
 8002f40:	2b70      	cmp	r3, #112	@ 0x70
 8002f42:	d87b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f44:	2b60      	cmp	r3, #96	@ 0x60
 8002f46:	d050      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x116>
 8002f48:	2b60      	cmp	r3, #96	@ 0x60
 8002f4a:	d877      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f4c:	2b50      	cmp	r3, #80	@ 0x50
 8002f4e:	d03c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xf6>
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d873      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d058      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x136>
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d86f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f5c:	2b30      	cmp	r3, #48	@ 0x30
 8002f5e:	d064      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x156>
 8002f60:	2b30      	cmp	r3, #48	@ 0x30
 8002f62:	d86b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d060      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x156>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d867      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x168>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05c      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x156>
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d05a      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f74:	e062      	b.n	800303c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f000 fb2a 	bl	80035de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	609a      	str	r2, [r3, #8]
      break;
 8002fa2:	e04e      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f000 fb13 	bl	80035de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fc6:	609a      	str	r2, [r3, #8]
      break;
 8002fc8:	e03b      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f000 fa8a 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2150      	movs	r1, #80	@ 0x50
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fae1 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 8002fe8:	e02b      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f000 faa8 	bl	800354c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2160      	movs	r1, #96	@ 0x60
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fad1 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 8003008:	e01b      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	f000 fa6a 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2140      	movs	r1, #64	@ 0x40
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fac1 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 8003028:	e00b      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 fab8 	bl	80035aa <TIM_ITRx_SetConfig>
        break;
 800303a:	e002      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800303c:	bf00      	nop
 800303e:	e000      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003040:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	@ (8003184 <TIM_Base_SetConfig+0xe0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a32      	ldr	r2, [pc, #200]	@ (8003188 <TIM_Base_SetConfig+0xe4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00f      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ca:	d00b      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	@ (800318c <TIM_Base_SetConfig+0xe8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003190 <TIM_Base_SetConfig+0xec>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2d      	ldr	r2, [pc, #180]	@ (8003194 <TIM_Base_SetConfig+0xf0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a22      	ldr	r2, [pc, #136]	@ (8003184 <TIM_Base_SetConfig+0xe0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <TIM_Base_SetConfig+0x82>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a21      	ldr	r2, [pc, #132]	@ (8003188 <TIM_Base_SetConfig+0xe4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00f      	beq.n	8003126 <TIM_Base_SetConfig+0x82>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x82>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <TIM_Base_SetConfig+0xe8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x82>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <TIM_Base_SetConfig+0xec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x82>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <TIM_Base_SetConfig+0xf0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <TIM_Base_SetConfig+0xe0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0xc8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a08      	ldr	r2, [pc, #32]	@ (8003188 <TIM_Base_SetConfig+0xe4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d103      	bne.n	8003174 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	615a      	str	r2, [r3, #20]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40013400 	.word	0x40013400
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00

08003198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f023 0201 	bic.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f023 0302 	bic.w	r3, r3, #2
 80031e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a20      	ldr	r2, [pc, #128]	@ (8003270 <TIM_OC1_SetConfig+0xd8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_OC1_SetConfig+0x64>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003274 <TIM_OC1_SetConfig+0xdc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10c      	bne.n	8003216 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0308 	bic.w	r3, r3, #8
 8003202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <TIM_OC1_SetConfig+0xd8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC1_SetConfig+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a14      	ldr	r2, [pc, #80]	@ (8003274 <TIM_OC1_SetConfig+0xdc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800322c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40013400 	.word	0x40013400

08003278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0210 	bic.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a21      	ldr	r2, [pc, #132]	@ (8003358 <TIM_OC2_SetConfig+0xe0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC2_SetConfig+0x68>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a20      	ldr	r2, [pc, #128]	@ (800335c <TIM_OC2_SetConfig+0xe4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10d      	bne.n	80032fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <TIM_OC2_SetConfig+0xe0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_OC2_SetConfig+0x94>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a15      	ldr	r2, [pc, #84]	@ (800335c <TIM_OC2_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d113      	bne.n	8003334 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800331a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400

08003360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a21      	ldr	r2, [pc, #132]	@ (8003440 <TIM_OC3_SetConfig+0xe0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_OC3_SetConfig+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <TIM_OC3_SetConfig+0xe4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <TIM_OC3_SetConfig+0xe0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_OC3_SetConfig+0x92>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <TIM_OC3_SetConfig+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d113      	bne.n	800341a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40013400 	.word	0x40013400

08003448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	031b      	lsls	r3, r3, #12
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <TIM_OC4_SetConfig+0xa0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC4_SetConfig+0x68>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a10      	ldr	r2, [pc, #64]	@ (80034ec <TIM_OC4_SetConfig+0xa4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d109      	bne.n	80034c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	019b      	lsls	r3, r3, #6
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40013400 	.word	0x40013400

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f023 0210 	bic.w	r2, r3, #16
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	031b      	lsls	r3, r3, #12
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003588:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f043 0307 	orr.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035de:	b480      	push	{r7}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	431a      	orrs	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	609a      	str	r2, [r3, #8]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2201      	movs	r2, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_TIMEx_PWMN_Start+0x24>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e022      	b.n	80036ce <HAL_TIMEx_PWMN_Start+0x6a>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d109      	bne.n	80036a2 <HAL_TIMEx_PWMN_Start+0x3e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e015      	b.n	80036ce <HAL_TIMEx_PWMN_Start+0x6a>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_TIMEx_PWMN_Start+0x58>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e008      	b.n	80036ce <HAL_TIMEx_PWMN_Start+0x6a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e063      	b.n	800379e <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_TIMEx_PWMN_Start+0x82>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e4:	e013      	b.n	800370e <HAL_TIMEx_PWMN_Start+0xaa>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d104      	bne.n	80036f6 <HAL_TIMEx_PWMN_Start+0x92>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036f4:	e00b      	b.n	800370e <HAL_TIMEx_PWMN_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d104      	bne.n	8003706 <HAL_TIMEx_PWMN_Start+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	e003      	b.n	800370e <HAL_TIMEx_PWMN_Start+0xaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2204      	movs	r2, #4
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f91f 	bl	800395a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_TIMEx_PWMN_Start+0x144>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d018      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0x104>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_TIMEx_PWMN_Start+0x148>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0x104>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003748:	d00e      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0x104>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0x104>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a16      	ldr	r2, [pc, #88]	@ (80037b4 <HAL_TIMEx_PWMN_Start+0x150>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIMEx_PWMN_Start+0x104>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_TIMEx_PWMN_Start+0x154>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d111      	bne.n	800378c <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d010      	beq.n	800379c <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	e007      	b.n	800379c <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e050      	b.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382a:	d00e      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a14      	ldr	r2, [pc, #80]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10c      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40013400 	.word	0x40013400
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00

08003894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e03d      	b.n	800392c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2204      	movs	r2, #4
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	43db      	mvns	r3, r3
 800397c:	401a      	ands	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	621a      	str	r2, [r3, #32]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e03f      	b.n	8003a34 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd fb2d 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	@ 0x24
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fc84 	bl	80042f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d17c      	bne.n	8003b56 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Transmit+0x2c>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e075      	b.n	8003b58 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Transmit+0x3e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e06e      	b.n	8003b58 <HAL_UART_Transmit+0x11c>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	@ 0x21
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a90:	f7fd fbc6 	bl	8001220 <HAL_GetTick>
 8003a94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aaa:	d108      	bne.n	8003abe <HAL_UART_Transmit+0x82>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e003      	b.n	8003ac6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003ace:	e02a      	b.n	8003b26 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fa37 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e036      	b.n	8003b58 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	3302      	adds	r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e007      	b.n	8003b18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1cf      	bne.n	8003ad0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa07 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e006      	b.n	8003b58 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d11d      	bne.n	8003bb6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Receive_IT+0x26>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e016      	b.n	8003bb8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Receive_IT+0x38>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e00f      	b.n	8003bb8 <HAL_UART_Receive_IT+0x58>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa18 	bl	8003fe2 <UART_Start_Receive_IT>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_UART_IRQHandler+0x52>
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fac9 	bl	80041a2 <UART_Receive_IT>
      return;
 8003c10:	e17b      	b.n	8003f0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80b1 	beq.w	8003d7c <HAL_UART_IRQHandler+0x1bc>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_UART_IRQHandler+0x70>
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80a6 	beq.w	8003d7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_UART_IRQHandler+0x90>
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_UART_IRQHandler+0xb0>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f043 0202 	orr.w	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_UART_IRQHandler+0xd0>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <HAL_UART_IRQHandler+0xfa>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <HAL_UART_IRQHandler+0xee>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f043 0208 	orr.w	r2, r3, #8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 811e 	beq.w	8003f00 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_UART_IRQHandler+0x11e>
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa62 	bl	80041a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <HAL_UART_IRQHandler+0x146>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d031      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f9a4 	bl	8004054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d023      	beq.n	8003d62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d013      	beq.n	8003d5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	4a76      	ldr	r2, [pc, #472]	@ (8003f10 <HAL_UART_IRQHandler+0x350>)
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fc36 	bl	80015b0 <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e00e      	b.n	8003d78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8e3 	bl	8003f26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e00a      	b.n	8003d78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8df 	bl	8003f26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	e006      	b.n	8003d78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8db 	bl	8003f26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8003d76:	e0c3      	b.n	8003f00 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	bf00      	nop
    return;
 8003d7a:	e0c1      	b.n	8003f00 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f040 80a1 	bne.w	8003ec8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 809b 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8095 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04e      	beq.n	8003e60 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003dcc:	8a3b      	ldrh	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8098 	beq.w	8003f04 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dd8:	8a3a      	ldrh	r2, [r7, #16]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	f080 8092 	bcs.w	8003f04 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8a3a      	ldrh	r2, [r7, #16]
 8003de4:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d02b      	beq.n	8003e48 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dfe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e1e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0210 	bic.w	r2, r2, #16
 8003e3c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fb7a 	bl	800153c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f86d 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e5e:	e051      	b.n	8003f04 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d047      	beq.n	8003f08 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e78:	8a7b      	ldrh	r3, [r7, #18]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003e8c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0210 	bic.w	r2, r2, #16
 8003eba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ebc:	8a7b      	ldrh	r3, [r7, #18]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f839 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ec6:	e01f      	b.n	8003f08 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x324>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8f9 	bl	80040d4 <UART_Transmit_IT>
    return;
 8003ee2:	e012      	b.n	8003f0a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <HAL_UART_IRQHandler+0x34a>
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f93a 	bl	8004172 <UART_EndTransmit_IT>
    return;
 8003efe:	e004      	b.n	8003f0a <HAL_UART_IRQHandler+0x34a>
    return;
 8003f00:	bf00      	nop
 8003f02:	e002      	b.n	8003f0a <HAL_UART_IRQHandler+0x34a>
      return;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_UART_IRQHandler+0x34a>
      return;
 8003f08:	bf00      	nop
  }
}
 8003f0a:	3728      	adds	r7, #40	@ 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	080040ad 	.word	0x080040ad

08003f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	e02c      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d028      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6e:	f7fd f957 	bl	8001220 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d21d      	bcs.n	8003fba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003f8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d0c3      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4613      	mov	r3, r2
 8003fee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2222      	movs	r2, #34	@ 0x22
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0220 	orr.w	r2, r2, #32
 8004046:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800406a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0210 	bic.w	r2, r2, #16
 8004092:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff ff2d 	bl	8003f26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b21      	cmp	r3, #33	@ 0x21
 80040e6:	d13e      	bne.n	8004166 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f0:	d114      	bne.n	800411c <UART_Transmit_IT+0x48>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d110      	bne.n	800411c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]
 800411a:	e008      	b.n	800412e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6211      	str	r1, [r2, #32]
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29b      	uxth	r3, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4619      	mov	r1, r3
 800413c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10f      	bne.n	8004162 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004150:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004160:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004188:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff febe 	bl	8003f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b22      	cmp	r3, #34	@ 0x22
 80041b4:	f040 8099 	bne.w	80042ea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c0:	d117      	bne.n	80041f2 <UART_Receive_IT+0x50>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	1c9a      	adds	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80041f0:	e026      	b.n	8004240 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004204:	d007      	beq.n	8004216 <UART_Receive_IT+0x74>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <UART_Receive_IT+0x82>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e008      	b.n	8004236 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29b      	uxth	r3, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4619      	mov	r1, r3
 800424e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004250:	2b00      	cmp	r3, #0
 8004252:	d148      	bne.n	80042e6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0220 	bic.w	r2, r2, #32
 8004262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	2b01      	cmp	r3, #1
 8004292:	d123      	bne.n	80042dc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0210 	bic.w	r2, r2, #16
 80042a8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d10a      	bne.n	80042ce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fe2f 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
 80042da:	e002      	b.n	80042e2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc fa5b 	bl	8000798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e002      	b.n	80042ec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800432e:	f023 030c 	bic.w	r3, r3, #12
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	430b      	orrs	r3, r1
 800433a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2c      	ldr	r2, [pc, #176]	@ (8004408 <UART_SetConfig+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800435c:	f7fe fa00 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	e002      	b.n	800436a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004364:	f7fe f9e8 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8004368:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009a      	lsls	r2, r3, #2
 8004374:	441a      	add	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	4a22      	ldr	r2, [pc, #136]	@ (800440c <UART_SetConfig+0x118>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	0119      	lsls	r1, r3, #4
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <UART_SetConfig+0x118>)
 80043a2:	fba3 0302 	umull	r0, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2064      	movs	r0, #100	@ 0x64
 80043aa:	fb00 f303 	mul.w	r3, r0, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	3332      	adds	r3, #50	@ 0x32
 80043b4:	4a15      	ldr	r2, [pc, #84]	@ (800440c <UART_SetConfig+0x118>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c0:	4419      	add	r1, r3
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <UART_SetConfig+0x118>)
 80043da:	fba3 0302 	umull	r0, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2064      	movs	r0, #100	@ 0x64
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	@ 0x32
 80043ec:	4a07      	ldr	r2, [pc, #28]	@ (800440c <UART_SetConfig+0x118>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	440a      	add	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40013800 	.word	0x40013800
 800440c:	51eb851f 	.word	0x51eb851f

08004410 <memset>:
 8004410:	4603      	mov	r3, r0
 8004412:	4402      	add	r2, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	2600      	movs	r6, #0
 8004424:	4d0c      	ldr	r5, [pc, #48]	@ (8004458 <__libc_init_array+0x38>)
 8004426:	4c0d      	ldr	r4, [pc, #52]	@ (800445c <__libc_init_array+0x3c>)
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	f000 f81a 	bl	8004468 <_init>
 8004434:	2600      	movs	r6, #0
 8004436:	4d0a      	ldr	r5, [pc, #40]	@ (8004460 <__libc_init_array+0x40>)
 8004438:	4c0a      	ldr	r4, [pc, #40]	@ (8004464 <__libc_init_array+0x44>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	080044a8 	.word	0x080044a8
 800445c:	080044a8 	.word	0x080044a8
 8004460:	080044a8 	.word	0x080044a8
 8004464:	080044ac 	.word	0x080044ac

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
